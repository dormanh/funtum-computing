import{S as sa,i as ra,s as oa,l as o,u as s,a as H,L as Ye,e as Gr,m as l,p as i,v as r,h as t,c as L,M as et,q as $e,b as c,H as e,N as La,O as p,P as Dl,Q as wn,R as Rl,n as Za,T as Xa,F as Wl,I as Gl,J as Ul,K as Kl,f as ue,t as de,U as Ol,V as Jl,x as ve,y as we,z as ge,C as ye,W as Er,X as Pr,Y as Sr,Z as Ur}from"../chunks/index-bb217d03.js";import{m,g as ks,Q as Kr,C as Zl,p as Or}from"../chunks/CameraControl-d03be3a0.js";function Xl(a){let n,h,f,u=m(`K = ${a[6]}`)+"",y,d,b=m("r")+"",g,w,B=m("a^r \\mod N = 1")+"",k,M,C,P,x,re=m("r")+"",S,z,j=m(`${a[1]}^{${a[2]}} \\mod ${a[0]} = 1`)+"",E,ee,A=m("m")+"",D,I,N=m(`${a[1]}^{${a[2]}} = m \\cdot ${a[0]} + 1`)+"",W,X;function Z(F,O){return F[2]%2==0?ti:ei}let $=Z(a),V=$(a);return{c(){n=o("p"),h=s("As "),f=new Ye(!1),y=s(", the value of "),d=new Ye(!1),g=s(" in "),w=new Ye(!1),k=s(` will
		be informative.`),M=H(),C=o("p"),P=s(`As these are all relatively small numbers, we can try all relevant possible values for
		`),x=new Ye(!1),S=s(" rather quickly and find that "),z=new Ye(!1),E=s(` which means
		that there is an `),ee=new Ye(!1),D=s(" for which "),I=new Ye(!1),W=H(),X=o("p"),V.c(),this.h()},l(F){n=l(F,"P",{});var O=i(n);h=r(O,"As "),f=et(O,!1),y=r(O,", the value of "),d=et(O,!1),g=r(O," in "),w=et(O,!1),k=r(O,` will
		be informative.`),O.forEach(t),M=L(F),C=l(F,"P",{});var se=i(C);P=r(se,`As these are all relatively small numbers, we can try all relevant possible values for
		`),x=et(se,!1),S=r(se," rather quickly and find that "),z=et(se,!1),E=r(se,` which means
		that there is an `),ee=et(se,!1),D=r(se," for which "),I=et(se,!1),se.forEach(t),W=L(F),X=l(F,"P",{});var Se=i(X);V.l(Se),Se.forEach(t),this.h()},h(){f.a=y,d.a=g,w.a=k,x.a=S,z.a=E,ee.a=D,I.a=null},m(F,O){c(F,n,O),e(n,h),f.m(u,n),e(n,y),d.m(b,n),e(n,g),w.m(B,n),e(n,k),c(F,M,O),c(F,C,O),e(C,P),x.m(re,C),e(C,S),z.m(j,C),e(C,E),ee.m(A,C),e(C,D),I.m(N,C),c(F,W,O),c(F,X,O),V.m(X,null)},p(F,O){O&64&&u!==(u=m(`K = ${F[6]}`)+"")&&f.p(u),O&7&&j!==(j=m(`${F[1]}^{${F[2]}} \\mod ${F[0]} = 1`)+"")&&z.p(j),O&7&&N!==(N=m(`${F[1]}^{${F[2]}} = m \\cdot ${F[0]} + 1`)+"")&&I.p(N),$===($=Z(F))&&V?V.p(F,O):(V.d(1),V=$(F),V&&(V.c(),V.m(X,null)))},d(F){F&&t(n),F&&t(M),F&&t(C),F&&t(W),F&&t(X),V.d()}}}function Yl(a){let n,h,f,u=m("K \\neq 1")+"",y,d,b=m("a")+"",g,w,B=m("N")+"",k,M,C=m(`K=${a[6]}`)+"",P,x,re=m("a")+"",S;return{c(){n=o("p"),h=s("As in this case "),f=new Ye(!1),y=s(", a new "),d=new Ye(!1),g=s(` is needed. Or to put a more positive
		spin on it, we instantly can found a prime factor for `),w=new Ye(!1),k=s(`, which in fact
		`),M=new Ye(!1),P=s(` is. However, in order to see the whole algorithm in action, we should choose
		a new `),x=new Ye(!1),S=s("."),this.h()},l(z){n=l(z,"P",{});var j=i(n);h=r(j,"As in this case "),f=et(j,!1),y=r(j,", a new "),d=et(j,!1),g=r(j,` is needed. Or to put a more positive
		spin on it, we instantly can found a prime factor for `),w=et(j,!1),k=r(j,`, which in fact
		`),M=et(j,!1),P=r(j,` is. However, in order to see the whole algorithm in action, we should choose
		a new `),x=et(j,!1),S=r(j,"."),j.forEach(t),this.h()},h(){f.a=y,d.a=g,w.a=k,M.a=P,x.a=S},m(z,j){c(z,n,j),e(n,h),f.m(u,n),e(n,y),d.m(b,n),e(n,g),w.m(B,n),e(n,k),M.m(C,n),e(n,P),x.m(re,n),e(n,S)},p(z,j){j&64&&C!==(C=m(`K=${z[6]}`)+"")&&M.p(C)},d(z){z&&t(n)}}}function ei(a){let n,h=m("r")+"",f,u,y=m("a")+"",d;return{c(){n=new Ye(!1),f=s(" is odd, we need a new "),u=new Ye(!1),d=s("."),this.h()},l(b){n=et(b,!1),f=r(b," is odd, we need a new "),u=et(b,!1),d=r(b,"."),this.h()},h(){n.a=f,u.a=d},m(b,g){n.m(h,b,g),c(b,f,g),u.m(y,b,g),c(b,d,g)},p:Za,d(b){b&&n.d(),b&&t(f),b&&u.d(),b&&t(d)}}}function ti(a){let n,h,f=m("r")+"",u,y,d=m("b = a^{\\frac{r}{2}}")+"",b,g,w=m("a^r = m \\cdot N + 1 \\Rightarrow b^2-1 = (b + 1)(b - 1) = m \\cdot N")+"",B,k,M=m(`b = ${a[5]}`)+"",C,P,x=m("N")+"",re,S,z=m("b-1")+"",j,E,ee=m("b+1")+"",A,D,I=m(`${ks(a[0],a[5]-1)}`)+"",N,W,X=m(`${ks(a[0],a[5]+1)}`)+"",Z;return{c(){n=s("As "),h=new Ye(!1),u=s(" is even, so we can create "),y=new Ye(!1),b=s(`, and
			expand the above so that
			`),g=new Ye(!1),B=s(`. In this
			case, as `),k=new Ye(!1),C=s(`, we can calculate the greatest common divisor for
			`),P=new Ye(!1),re=s(" with "),S=new Ye(!1),j=s(" and "),E=new Ye(!1),A=s(` very quickly, which are
			`),D=new Ye(!1),N=s(" and "),W=new Ye(!1),Z=s(" respectively"),this.h()},l($){n=r($,"As "),h=et($,!1),u=r($," is even, so we can create "),y=et($,!1),b=r($,`, and
			expand the above so that
			`),g=et($,!1),B=r($,`. In this
			case, as `),k=et($,!1),C=r($,`, we can calculate the greatest common divisor for
			`),P=et($,!1),re=r($," with "),S=et($,!1),j=r($," and "),E=et($,!1),A=r($,` very quickly, which are
			`),D=et($,!1),N=r($," and "),W=et($,!1),Z=r($," respectively"),this.h()},h(){h.a=u,y.a=b,g.a=B,k.a=C,P.a=re,S.a=j,E.a=A,D.a=N,W.a=Z},m($,V){c($,n,V),h.m(f,$,V),c($,u,V),y.m(d,$,V),c($,b,V),g.m(w,$,V),c($,B,V),k.m(M,$,V),c($,C,V),P.m(x,$,V),c($,re,V),S.m(z,$,V),c($,j,V),E.m(ee,$,V),c($,A,V),D.m(I,$,V),c($,N,V),W.m(X,$,V),c($,Z,V)},p($,V){V&32&&M!==(M=m(`b = ${$[5]}`)+"")&&k.p(M),V&33&&I!==(I=m(`${ks($[0],$[5]-1)}`)+"")&&D.p(I),V&33&&X!==(X=m(`${ks($[0],$[5]+1)}`)+"")&&W.p(X)},d($){$&&t(n),$&&h.d(),$&&t(u),$&&y.d(),$&&t(b),$&&g.d(),$&&t(B),$&&k.d(),$&&t(C),$&&P.d(),$&&t(re),$&&S.d(),$&&t(j),$&&E.d(),$&&t(A),$&&D.d(),$&&t(N),$&&W.d(),$&&t(Z)}}}function ai(a){let n,h,f,u,y,d,b,g,w,B,k,M,C,P,x,re,S,z=m(` = ${a[3]} \\cdot ${a[4]}`)+"",j,E,ee,A,D=m(`a = ${a[1]}`)+"",I,N,W=m(`N = ${a[0]}`)+"",X,Z,$=m(`K = ${a[6]}`)+"",V,F,O,se,Se;function Ee(v,T){return v[6]!=1?Yl:Xl}let Fe=Ee(a),te=Fe(a);return{c(){n=o("div"),h=o("div"),f=s("a:"),u=H(),y=o("input"),b=H(),g=o("input"),B=H(),k=o("div"),M=s("N:"),C=H(),P=o("input"),re=H(),S=o("div"),j=H(),E=o("p"),ee=s("The greatest common divisor of "),A=new Ye(!1),I=s(" and "),N=new Ye(!1),X=s(` is
	`),Z=new Ye(!1),V=s(". This is very quick to calculate."),F=H(),te.c(),O=Gr(),this.h()},l(v){n=l(v,"DIV",{class:!0});var T=i(n);h=l(T,"DIV",{class:!0});var G=i(h);f=r(G,"a:"),G.forEach(t),u=L(T),y=l(T,"INPUT",{class:!0,type:!0,min:!0,max:!0}),b=L(T),g=l(T,"INPUT",{class:!0,type:!0,min:!0,max:!0}),B=L(T),k=l(T,"DIV",{class:!0});var U=i(k);M=r(U,"N:"),U.forEach(t),C=L(T),P=l(T,"INPUT",{class:!0,type:!0,min:!0,max:!0}),re=L(T),S=l(T,"DIV",{id:!0,class:!0});var pe=i(S);pe.forEach(t),T.forEach(t),j=L(v),E=l(v,"P",{});var He=i(E);ee=r(He,"The greatest common divisor of "),A=et(He,!1),I=r(He," and "),N=et(He,!1),X=r(He,` is
	`),Z=et(He,!1),V=r(He,". This is very quick to calculate."),He.forEach(t),F=L(v),te.l(v),O=Gr(),this.h()},h(){$e(h,"class","varlabel svelte-zwcizk"),$e(y,"class","numsel svelte-zwcizk"),$e(y,"type","number"),$e(y,"min",2),$e(y,"max",d=a[0]-1),$e(g,"class","slider svelte-zwcizk"),$e(g,"type","range"),$e(g,"min",2),$e(g,"max",w=a[0]-1),$e(k,"class","varlabel svelte-zwcizk"),$e(P,"class","numsel svelte-zwcizk"),$e(P,"type","number"),$e(P,"min","1"),$e(P,"max",a[7]),$e(S,"id","decomp"),$e(S,"class","svelte-zwcizk"),$e(n,"class","cpanel svelte-zwcizk"),A.a=I,N.a=X,Z.a=V},m(v,T){c(v,n,T),e(n,h),e(h,f),e(n,u),e(n,y),La(y,a[1]),e(n,b),e(n,g),La(g,a[1]),e(n,B),e(n,k),e(k,M),e(n,C),e(n,P),La(P,a[0]),e(n,re),e(n,S),S.innerHTML=z,c(v,j,T),c(v,E,T),e(E,ee),A.m(D,E),e(E,I),N.m(W,E),e(E,X),Z.m($,E),e(E,V),c(v,F,T),te.m(v,T),c(v,O,T),se||(Se=[p(y,"input",a[10]),p(g,"change",a[11]),p(g,"input",a[11]),Dl(x=a[8].call(null,P,a[0])),p(P,"input",a[12])],se=!0)},p(v,[T]){T&1&&d!==(d=v[0]-1)&&$e(y,"max",d),T&2&&wn(y.value)!==v[1]&&La(y,v[1]),T&1&&w!==(w=v[0]-1)&&$e(g,"max",w),T&2&&La(g,v[1]),x&&Rl(x.update)&&T&1&&x.update.call(null,v[0]),T&1&&wn(P.value)!==v[0]&&La(P,v[0]),T&24&&z!==(z=m(` = ${v[3]} \\cdot ${v[4]}`)+"")&&(S.innerHTML=z),T&2&&D!==(D=m(`a = ${v[1]}`)+"")&&A.p(D),T&1&&W!==(W=m(`N = ${v[0]}`)+"")&&N.p(W),T&64&&$!==($=m(`K = ${v[6]}`)+"")&&Z.p($),Fe===(Fe=Ee(v))&&te?te.p(v,T):(te.d(1),te=Fe(v),te&&(te.c(),te.m(O.parentNode,O)))},i:Za,o:Za,d(v){v&&t(n),v&&t(j),v&&t(E),v&&t(F),te.d(v),v&&t(O),se=!1,Xa(Se)}}}function ni(a,n){for(let h=1;h<n;h++){let f=a%n;for(let u=1;u<h;u++)f=f*a%n;if(f==1)return h}return 0}function si(a,n,h){let f,u,y,{bits:d=7}=n,b=Math.pow(2,d)-1;const g=new Set;for(let E=2;E<=b/2;E++){let ee=!0;g.forEach(function(A){E%A==0&&(ee=!1)}),ee&&g.add(E)}let w=39,B=w,k=7,M,C;function P(E){for(const ee of g)if(g.has(E/ee))return h(3,M=ee),h(4,C=E/ee),!0;return!1}P(w);function x(E,ee){return{update(A){let D=A-B;if(D!=0){for(;!P(A);)if(A+=D,A<=2||A>=b)return;re(A)}}}}function re(E){h(0,w=E),B=w,h(1,k=k>=w?w-1:k)}function S(){k=wn(this.value),h(1,k)}function z(){k=wn(this.value),h(1,k)}function j(){w=wn(this.value),h(0,w)}return a.$$set=E=>{"bits"in E&&h(9,d=E.bits)},a.$$.update=()=>{a.$$.dirty&3&&h(2,f=ni(k,w)),a.$$.dirty&3&&h(6,u=ks(w,k)),a.$$.dirty&6&&h(5,y=Math.pow(k,f/2))},[w,k,f,M,C,y,u,b,x,d,S,z,j]}class ri extends sa{constructor(n){super(),ra(this,n,si,ai,oa,{bits:9})}}function oi(a){const n=a-1;return n*n*n+1}function li(a){return--a*a*a*a*a+1}function ii(a,{delay:n=0,duration:h=400,easing:f=oi,start:u=0,opacity:y=0}={}){const d=getComputedStyle(a),b=+d.opacity,g=d.transform==="none"?"":d.transform,w=1-u,B=b*(1-y);return{delay:n,duration:h,easing:f,css:(k,M)=>`
			transform: ${g} scale(${1-w*M});
			opacity: ${b-B*M}
		`}}function Jr(a){let n,h;return{c(){n=o("div"),this.h()},l(f){n=l(f,"DIV",{class:!0});var u=i(n);u.forEach(t),this.h()},h(){$e(n,"class","hover-inner svelte-5qv8za")},m(f,u){c(f,n,u),n.innerHTML=a[0]},p(f,u){a=f,u&1&&(n.innerHTML=a[0])},i(f){h||Ol(()=>{h=Jl(n,ii,{duration:150,easing:li,opacity:0}),h.start()})},o:Za,d(f){f&&t(n)}}}function hi(a){let n,h,f,u;const y=a[5].default,d=Wl(y,a,a[4],null);let b=a[1]&&Jr(a);return{c(){n=o("span"),d&&d.c(),b&&b.c(),this.h()},l(g){n=l(g,"SPAN",{class:!0});var w=i(n);d&&d.l(w),b&&b.l(w),w.forEach(t),this.h()},h(){$e(n,"class","hover-outer svelte-5qv8za")},m(g,w){c(g,n,w),d&&d.m(n,null),b&&b.m(n,null),h=!0,f||(u=[p(n,"mouseenter",a[2]),p(n,"mouseleave",a[3])],f=!0)},p(g,[w]){d&&d.p&&(!h||w&16)&&Gl(d,y,g,g[4],h?Kl(y,g[4],w,null):Ul(g[4]),null),g[1]?b?(b.p(g,w),w&2&&ue(b,1)):(b=Jr(g),b.c(),ue(b,1),b.m(n,null)):b&&(b.d(1),b=null)},i(g){h||(ue(d,g),ue(b),h=!0)},o(g){de(d,g),h=!1},d(g){g&&t(n),d&&d.d(g),b&&b.d(),f=!1,Xa(u)}}}function ui(a,n,h){let{$$slots:f={},$$scope:u}=n,{hovertext:y}=n,d=!1;const b=()=>h(1,d=!0),g=()=>h(1,d=!1);return a.$$set=w=>{"hovertext"in w&&h(0,y=w.hovertext),"$$scope"in w&&h(4,u=w.$$scope)},[y,d,b,g,u,f]}class at extends sa{constructor(n){super(),ra(this,n,ui,hi,oa,{hovertext:0})}}const mi=`<a href="https://en.wikipedia.org/wiki/Semiprime"><h3 class="text-lg font-semibold">Semiprime</h3></a><p>In mathematics, a <b>semiprime</b> is a natural number that is the product of exactly two prime numbers. The two primes in the product may equal each other, so the semiprimes include the squares of prime numbers.
Because there are infinitely many prime numbers, there are also infinitely many semiprimes. Semiprimes are also called <b>biprimes</b>.</p>`,pi='<a href="https://en.wikipedia.org/wiki/General_number_field_sieve"><h3>General number field sieve</h3></a><p>In number theory, the <b>general number field sieve</b> (<b>GNFS</b>) is the most efficient classical algorithm known for factoring integers larger than <span class="texhtml ">10<sup>100</sup></span>. Heuristically, its complexity for factoring an integer <span class="texhtml mvar" style="font-style:italic">n</span> (consisting of <span class="texhtml ">\u230Alog<sub>2</sub> <span class="texhtml mvar" style="font-style:italic">n</span>\u230B + 1</span> bits) is of the form</p><dl><dd><span class="mwe-math-element"><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/fcc5450b9f039008c0a728e15b6c66f24dafbb30" class="mwe-math-fallback-image-inline" aria-hidden="true" style="vertical-align:-2.505ex;width:57.324ex;height:6.343ex" /></span></dd></dl>',fi='<a href="https://en.wikipedia.org/wiki/Exponential_function"><h3>Exponential function</h3></a><p>The <b>exponential function</b> is a mathematical function denoted by <span class="mwe-math-element"><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/9dd9b17af32bc3cffe927507c7bccf4e2a96f585" class="mwe-math-fallback-image-inline" aria-hidden="true" style="vertical-align:-0.838ex;width:14.207ex;height:2.843ex" /></span> or <span class="mwe-math-element"><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/841c0d168e64191c45a45e54c7e447defd17ec6a" class="mwe-math-fallback-image-inline" aria-hidden="true" style="vertical-align:-0.338ex;width:2.256ex;height:2.343ex" /></span>. Unless otherwise specified, the term generally refers to the positive-valued function of a real variable, although it can be extended to the complex numbers or generalized to other mathematical objects like matrices or Lie algebras. The exponential function originated from the notion of exponentiation, but modern definitions allow it to be rigorously extended to all real arguments, including irrational numbers. Its ubiquitous occurrence in pure and applied mathematics led mathematician Walter Rudin to opine that the exponential function is "the most important function in mathematics".</p>',ci='<a href="https://en.wikipedia.org/wiki/Quantum_computing"><h3>Quantum computing</h3></a><p><b>Quantum computing</b> is a type of computation whose operations can harness the phenomena of quantum mechanics, such as superposition, interference, and entanglement. Devices that perform quantum computations are known as <b>quantum computers</b>. Though current quantum computers are too small to outperform usual (classical) computers for practical applications, larger realizations are believed to be capable of solving certain computational problems, such as integer factorization, substantially faster than classical computers. The study of quantum computing is a subfield of quantum information science.</p>',_i=`<a href="https://en.wikipedia.org/wiki/Cubic_function"><h3>Cubic function</h3></a><p>In mathematics, a <b>cubic function</b> is a function of the form <span class="mwe-math-element"><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/9cc573924b3e958061c7436c149efc76e4098668" class="mwe-math-fallback-image-inline" aria-hidden="true" style="vertical-align:-0.838ex;width:26.585ex;height:3.176ex" /></span>
where the coefficients <span class="texhtml mvar" style="font-style:italic">a</span>, <span class="texhtml mvar" style="font-style:italic">b</span>, <span class="texhtml mvar" style="font-style:italic">c</span>, and <span class="texhtml mvar" style="font-style:italic">d</span> are complex numbers, and the variable <span class="texhtml mvar" style="font-style:italic">x</span> takes real values, and <span class="mwe-math-element"><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/f455a7f96d74aa94573d8e32da3b240ab0aa294f" class="mwe-math-fallback-image-inline" aria-hidden="true" style="vertical-align:-0.838ex;width:5.491ex;height:2.676ex" /></span>. In other words, it is both a polynomial function of degree three, and a real function. In particular, the domain and the codomain are the set of the real numbers.</p>`,di='<a href="https://en.wikipedia.org/wiki/Computational_complexity"><h3 class="text-lg font-semibold">Computational complexity</h3></a><p>In computer science, the <b>computational complexity</b> or simply <b>complexity</b> of an algorithm is the amount of resources required to run it. Particular focus is given to time and memory requirements. The complexity of a problem is the complexity of the best algorithms that allow solving the problem.</p>',bi=`<a href="https://en.wikipedia.org/wiki/Linear_function"><h3>Linear function</h3></a><p>In mathematics, the term <b>linear function</b> refers to two distinct but related notions:</p><ul><li>In calculus and related areas, a linear function is a function whose graph is a straight line, that is, a polynomial function of degree zero or one. For distinguishing such a linear function from the other concept, the term affine function is often used.</li>
<li>In linear algebra, mathematical analysis, and functional analysis, a linear function is a linear map.</li></ul>`;function vi(a){let n;return{c(){n=s("semiprime")},l(h){n=r(h,"semiprime")},m(h,f){c(h,n,f)},d(h){h&&t(n)}}}function wi(a){let n;return{c(){n=s("number field sieve")},l(h){n=r(h,"number field sieve")},m(h,f){c(h,n,f)},d(h){h&&t(n)}}}function gi(a){let n;return{c(){n=s("exponentially")},l(h){n=r(h,"exponentially")},m(h,f){c(h,n,f)},d(h){h&&t(n)}}}function yi(a){let n;return{c(){n=s("quantum computer")},l(h){n=r(h,"quantum computer")},m(h,f){c(h,n,f)},d(h){h&&t(n)}}}function $i(a){let n;return{c(){n=s("cubically")},l(h){n=r(h,"cubically")},m(h,f){c(h,n,f)},d(h){h&&t(n)}}}function ki(a){let n;return{c(){n=s("Computational complexity")},l(h){n=r(h,"Computational complexity")},m(h,f){c(h,n,f)},d(h){h&&t(n)}}}function Ti(a){let n;return{c(){n=s("linearly")},l(h){n=r(h,"linearly")},m(h,f){c(h,n,f)},d(h){h&&t(n)}}}function Ni(a){let n,h,f,u,y,d,b=m("p, q \\in \\mathbb{P}")+"",g,w,B,k,M=m("N \\in \\mathbb{N}")+"",C,P,x=m("N = p \\cdot q")+"",re,S,z=m("15")+"",j,E,ee=m("3")+"",A,D,I=m("5")+"",N,W,X=m("62615533")+"",Z,$,V,F,O,se,Se,Ee,Fe,te,v=m("^3")+"",T,G,U=m("100")+"",pe,He,Ve=m("3")+"",Be,nt,We=m("200")+"",ze,st,Ce=m("5")+"",ke,gt,Te,De,oe,Re,_t,be,ht,fe;return w=new at({props:{hovertext:mi,$$slots:{default:[vi]},$$scope:{ctx:a}}}),$=new at({props:{hovertext:pi,$$slots:{default:[wi]},$$scope:{ctx:a}}}),F=new at({props:{hovertext:fi,$$slots:{default:[gi]},$$scope:{ctx:a}}}),se=new at({props:{hovertext:ci,$$slots:{default:[yi]},$$scope:{ctx:a}}}),Ee=new at({props:{hovertext:_i,$$slots:{default:[$i]},$$scope:{ctx:a}}}),De=new at({props:{hovertext:di,$$slots:{default:[ki]},$$scope:{ctx:a}}}),Re=new at({props:{hovertext:bi,$$slots:{default:[Ti]},$$scope:{ctx:a}}}),{c(){n=o("h2"),h=s("Description of the problem"),f=H(),u=o("p"),y=s("We would like to find the prime factors "),d=o("span"),g=s(" of a large "),ve(w.$$.fragment),B=H(),k=o("span"),C=s(" (so that "),P=o("span"),re=s("). Finding these factors for a small number, such as "),S=o("span"),j=s(", is quite easy. In fact, you may figure it out just by looking at it and recalling your grade school studies: the factors are "),E=o("span"),A=s(" and "),D=o("span"),N=s(". But what are the prime factors of, say, "),W=o("span"),Z=s("? It turns out that, using the best known classical (meaning non-quantum) algorithm (the so called "),ve($.$$.fragment),V=s("), solving the factoring problem scales "),ve(F.$$.fragment),O=s(" with the number of digits of the semiprime that we want to factor. With the help of Shor's algorithm and a sufficiently large "),ve(se.$$.fragment),Se=s(", the same problem scales roughly "),ve(Ee.$$.fragment),Fe=s(" with the number of digits, meaning that the number of elementary operations required is proportional to (the number of digits)"),te=o("span"),T=s(". (In fact, the algorithm does slighly better than that, but the precise formula is a bit complicated and is beside the point.) To illustrate what this means in practical terms, imagine the following. If factoring a "),G=o("span"),pe=s("-digit number with Shor's algorithm on a quantum computer takes one second, factoring the same number with the number field sieve on a classical computer takes more than "),He=o("span"),Be=s(" hours. If we now try with a "),nt=o("span"),ze=s("-digit number, Shor's algorithm finishes in roughly "),st=o("span"),ke=s(" seconds, while the classical solution would take more than a year!"),gt=H(),Te=o("p"),ve(De.$$.fragment),oe=s(` refers to how the time - or number of elementary operations - required to solve a given problem algorithmically grows with the size of the input. Let's say you have to find the longest book you have ever read. One way to approach this problem is to list the books you have read one by one, label the first one as the longest, and whenever you encounter an even longer book, it takes the place of the former. This way, you only have to keep track of the largest page number so far, and the book associated with it. The "elementary operation" in this case is checking the number of pages of the next book and comparing that with the previous maximum. If you have twice or three times as many books, this procedure requires twice or three times as many elementary operations. In other words, it grows `),ve(Re.$$.fragment),_t=s(" in the number of books. So, while the solution can be found using the same algorithm, the number of elementary operations required to carry out that algorithm depends on the size of the input. This is true for almost all algorithms that are designed to solve mathematical problems. However, how fast that growth is, makes all the difference between them.")},l(J){n=l(J,"H2",{});var ce=i(n);h=r(ce,"Description of the problem"),ce.forEach(t),f=L(J),u=l(J,"P",{});var R=i(u);y=r(R,"We would like to find the prime factors "),d=l(R,"SPAN",{});var dt=i(d);dt.forEach(t),g=r(R," of a large "),we(w.$$.fragment,R),B=L(R),k=l(R,"SPAN",{});var rt=i(k);rt.forEach(t),C=r(R," (so that "),P=l(R,"SPAN",{});var Ge=i(P);Ge.forEach(t),re=r(R,"). Finding these factors for a small number, such as "),S=l(R,"SPAN",{});var bt=i(S);bt.forEach(t),j=r(R,", is quite easy. In fact, you may figure it out just by looking at it and recalling your grade school studies: the factors are "),E=l(R,"SPAN",{});var ot=i(E);ot.forEach(t),A=r(R," and "),D=l(R,"SPAN",{});var Ze=i(D);Ze.forEach(t),N=r(R,". But what are the prime factors of, say, "),W=l(R,"SPAN",{});var qt=i(W);qt.forEach(t),Z=r(R,"? It turns out that, using the best known classical (meaning non-quantum) algorithm (the so called "),we($.$$.fragment,R),V=r(R,"), solving the factoring problem scales "),we(F.$$.fragment,R),O=r(R," with the number of digits of the semiprime that we want to factor. With the help of Shor's algorithm and a sufficiently large "),we(se.$$.fragment,R),Se=r(R,", the same problem scales roughly "),we(Ee.$$.fragment,R),Fe=r(R," with the number of digits, meaning that the number of elementary operations required is proportional to (the number of digits)"),te=l(R,"SPAN",{});var ae=i(te);ae.forEach(t),T=r(R,". (In fact, the algorithm does slighly better than that, but the precise formula is a bit complicated and is beside the point.) To illustrate what this means in practical terms, imagine the following. If factoring a "),G=l(R,"SPAN",{});var Me=i(G);Me.forEach(t),pe=r(R,"-digit number with Shor's algorithm on a quantum computer takes one second, factoring the same number with the number field sieve on a classical computer takes more than "),He=l(R,"SPAN",{});var ne=i(He);ne.forEach(t),Be=r(R," hours. If we now try with a "),nt=l(R,"SPAN",{});var Tt=i(nt);Tt.forEach(t),ze=r(R,"-digit number, Shor's algorithm finishes in roughly "),st=l(R,"SPAN",{});var vt=i(st);vt.forEach(t),ke=r(R," seconds, while the classical solution would take more than a year!"),R.forEach(t),gt=L(J),Te=l(J,"P",{});var Nt=i(Te);we(De.$$.fragment,Nt),oe=r(Nt,` refers to how the time - or number of elementary operations - required to solve a given problem algorithmically grows with the size of the input. Let's say you have to find the longest book you have ever read. One way to approach this problem is to list the books you have read one by one, label the first one as the longest, and whenever you encounter an even longer book, it takes the place of the former. This way, you only have to keep track of the largest page number so far, and the book associated with it. The "elementary operation" in this case is checking the number of pages of the next book and comparing that with the previous maximum. If you have twice or three times as many books, this procedure requires twice or three times as many elementary operations. In other words, it grows `),we(Re.$$.fragment,Nt),_t=r(Nt," in the number of books. So, while the solution can be found using the same algorithm, the number of elementary operations required to carry out that algorithm depends on the size of the input. This is true for almost all algorithms that are designed to solve mathematical problems. However, how fast that growth is, makes all the difference between them."),Nt.forEach(t)},m(J,ce){c(J,n,ce),e(n,h),c(J,f,ce),c(J,u,ce),e(u,y),e(u,d),d.innerHTML=b,e(u,g),ge(w,u,null),e(u,B),e(u,k),k.innerHTML=M,e(u,C),e(u,P),P.innerHTML=x,e(u,re),e(u,S),S.innerHTML=z,e(u,j),e(u,E),E.innerHTML=ee,e(u,A),e(u,D),D.innerHTML=I,e(u,N),e(u,W),W.innerHTML=X,e(u,Z),ge($,u,null),e(u,V),ge(F,u,null),e(u,O),ge(se,u,null),e(u,Se),ge(Ee,u,null),e(u,Fe),e(u,te),te.innerHTML=v,e(u,T),e(u,G),G.innerHTML=U,e(u,pe),e(u,He),He.innerHTML=Ve,e(u,Be),e(u,nt),nt.innerHTML=We,e(u,ze),e(u,st),st.innerHTML=Ce,e(u,ke),c(J,gt,ce),c(J,Te,ce),ge(De,Te,null),e(Te,oe),ge(Re,Te,null),e(Te,_t),be=!0,ht||(fe=[p(d,"mouseenter",a[0]),p(k,"mouseenter",a[1]),p(P,"mouseenter",a[2]),p(S,"mouseenter",a[3]),p(E,"mouseenter",a[4]),p(D,"mouseenter",a[5]),p(W,"mouseenter",a[6]),p(te,"mouseenter",a[7]),p(G,"mouseenter",a[8]),p(He,"mouseenter",a[9]),p(nt,"mouseenter",a[10]),p(st,"mouseenter",a[11])],ht=!0)},p(J,[ce]){const R={};ce&4096&&(R.$$scope={dirty:ce,ctx:J}),w.$set(R);const dt={};ce&4096&&(dt.$$scope={dirty:ce,ctx:J}),$.$set(dt);const rt={};ce&4096&&(rt.$$scope={dirty:ce,ctx:J}),F.$set(rt);const Ge={};ce&4096&&(Ge.$$scope={dirty:ce,ctx:J}),se.$set(Ge);const bt={};ce&4096&&(bt.$$scope={dirty:ce,ctx:J}),Ee.$set(bt);const ot={};ce&4096&&(ot.$$scope={dirty:ce,ctx:J}),De.$set(ot);const Ze={};ce&4096&&(Ze.$$scope={dirty:ce,ctx:J}),Re.$set(Ze)},i(J){be||(ue(w.$$.fragment,J),ue($.$$.fragment,J),ue(F.$$.fragment,J),ue(se.$$.fragment,J),ue(Ee.$$.fragment,J),ue(De.$$.fragment,J),ue(Re.$$.fragment,J),be=!0)},o(J){de(w.$$.fragment,J),de($.$$.fragment,J),de(F.$$.fragment,J),de(se.$$.fragment,J),de(Ee.$$.fragment,J),de(De.$$.fragment,J),de(Re.$$.fragment,J),be=!1},d(J){J&&t(n),J&&t(f),J&&t(u),ye(w),ye($),ye(F),ye(se),ye(Ee),J&&t(gt),J&&t(Te),ye(De),ye(Re),ht=!1,Xa(fe)}}}function Ha(a){console.log(a)}function Ei(a){return[()=>Ha(["q","p","P"]),()=>Ha(["N"]),()=>Ha(["q","N","p"]),()=>Ha([]),()=>Ha([]),()=>Ha([]),()=>Ha([]),()=>Ha([]),()=>Ha([]),()=>Ha([]),()=>Ha([]),()=>Ha([])]}class Pi extends sa{constructor(n){super(),ra(this,n,Ei,Ni,oa,{})}}const Si='<a href="https://en.wikipedia.org/wiki/Greatest_common_divisor"><h3>Greatest common divisor</h3></a><p>In mathematics, the <b>greatest common divisor</b> (<b>GCD</b>) of two or more integers, which are not all zero, is the largest positive integer that divides each of the integers. For two integers <i>x</i>, <i>y</i>, the greatest common divisor of <i>x</i> and <i>y</i> is denoted <span class="mwe-math-element"><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/24c083a217bb5e2d3468e683c957f220a683e4d8" class="mwe-math-fallback-image-inline" aria-hidden="true" style="vertical-align:-0.838ex;width:8.816ex;height:2.843ex" /></span>. For example, the GCD of 8 and 12 is 4, that is, <span class="mwe-math-element"><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/cabed257e6ea789ef3febd9add3a7f3ef2237361" class="mwe-math-fallback-image-inline" aria-hidden="true" style="vertical-align:-0.838ex;width:14.079ex;height:2.843ex" /></span>.</p>',Ai=`<a href="https://en.wikipedia.org/wiki/Euclidean_algorithm"><h3>Euclidean algorithm</h3></a><p>In mathematics, the <b>Euclidean algorithm</b>, or <b>Euclid's algorithm</b>, is an efficient method for computing the greatest common divisor (GCD) of two integers (numbers), the largest number that divides them both without a remainder. It is named after the ancient Greek mathematician Euclid, who first described it in <span>his <i>Elements</i></span> .
It is an example of an <i>algorithm</i>, a step-by-step procedure for performing a calculation according to well-defined rules,
and is one of the oldest algorithms in common use. It can be used to reduce fractions to their simplest form, and is a part of many other number-theoretic and cryptographic calculations.</p>`;function qi(a){let n;return{c(){n=s("greatest common divisor")},l(h){n=r(h,"greatest common divisor")},m(h,f){c(h,n,f)},d(h){h&&t(n)}}}function Hi(a){let n;return{c(){n=s("Euclid's algorithm")},l(h){n=r(h,"Euclid's algorithm")},m(h,f){c(h,n,f)},d(h){h&&t(n)}}}function Li(a){let n,h,f,u,y,d,b,g,w,B,k,M=m("a \\in \\mathbb{N}, 1 < a < N")+"",C,P,x=m("a")+"",re,S,z=m("N")+"",j,E,ee=m("\\gdc(a, N) = 1")+"",A,D,I=m("\\gcd")+"",N,W,X,Z,$=m("a")+"",V,F,O=m("N")+"",se,Se,Ee=m("N")+"",Fe,te,v,T,G,U,pe=m("f(r): \\mathbb{N} \\rightarrow \\mathbb{N} = a^r \\mod N")+"",He,Ve,Be=m("0 < \\hat{r} < N")+"",nt,We,ze=m("f(\\hat{r}) = 1")+"",st,Ce,ke=m("\\hat{r}")+"",gt,Te,De=m("a")+"",oe,Re,_t,be,ht,fe,J=m("\\hat{r}")+"",ce,R,dt=m("\\hat{r}")+"",rt,Ge,bt=m("m \\in \\mathbb{N}")+"",ot,Ze,qt=m("a^{\\hat{r}} = m \\cdot N + 1")+"",ae,Me,ne=m("b = a^{\\frac{\\hat{r}}{2}}")+"",Tt,vt,Nt=m("b^2 = (a^{\\frac{\\hat{r}}{2}})^2 = a^{\\hat{r}}")+"",Ue,Et,Jt=m("b^2 - 1 = (b + 1)(b - 1)")+"",Bt,yt,Ct=m("(b + 1)(b - 1) = m \\cdot N")+"",Pt,ca,$t,Xe,Ht,wt,Je=m("\\gcd(a^{\\frac{r}{2} - 1}, N)")+"",tt,ut,Ne=m("\\gcd(a^{\\frac{r}{2} + 1}, N)")+"",St,mt,_a,kt,Ft,da,pt,Zt,la,Wt,Ie,Y,Qe,Oe=m("\\hat{r}")+"",ya,Vt,Lt=m("1")+"",Ya,Xt,Ae=m("N")+"",Ma,Gt,ie=m("N")+"",Ia,Ut,ia,xa;return W=new at({props:{hovertext:Si,$$slots:{default:[qi]},$$scope:{ctx:a}}}),mt=new at({props:{hovertext:Ai,$$slots:{default:[Hi]},$$scope:{ctx:a}}}),{c(){n=o("h2"),h=s("Solution"),f=H(),u=o("p"),y=s("The factoring problem can be solved with the following simple, but very time-consuming algorithm:"),d=H(),b=o("ol"),g=o("li"),w=o("p"),B=s("We pick a random number "),k=o("span"),C=s(" and make sure that "),P=o("span"),re=s(" and "),S=o("span"),j=s(" are relative primes, meaning "),E=o("span"),A=s(", where "),D=o("span"),N=s(" stands for "),ve(W.$$.fragment),X=s(". (In case "),Z=o("span"),V=s(" happens to be a factor of "),F=o("span"),se=s(", the entire problem is solved and no further steps are required, but that is highly unlikely if "),Se=o("span"),Fe=s(" is large.)"),te=H(),v=o("li"),T=o("p"),G=s("Next, we construct the function "),U=o("span"),He=s(" and find the smallest integer "),Ve=o("span"),nt=s(" such that "),We=o("span"),st=s(". If "),Ce=o("span"),gt=s(" turns out to be odd, we unfortunately have to repeat the entire procedure with a different "),Te=o("span"),oe=s(" parameter."),Re=H(),_t=o("li"),be=o("p"),ht=s("If we're lucky and "),fe=o("span"),ce=s(" is even, we can proceed. From the definition of "),R=o("span"),rt=s(" follows that there's "),Ge=o("span"),ot=s(" such that "),Ze=o("span"),ae=s(". We can then define the integer "),Me=o("span"),Tt=s(", which means "),vt=o("span"),Ue=s(". Also, we can make use of a well-known algebraic identity to write "),Et=o("span"),Bt=s(". Putting together these three equations, we find that "),yt=o("span"),Pt=s("."),ca=H(),$t=o("li"),Xe=o("p"),Ht=s("And then we're done, because the prime factors we're looking for are "),wt=o("span"),tt=s(" and "),ut=o("span"),St=s(", and these are very easy to compute with the help of "),ve(mt.$$.fragment),_a=s("."),kt=H(),Ft=o("p"),da=s("For a more illuminating explanation, see the video "),pt=o("a"),Zt=s("Hacking at Quantum Speed with Shor's Algorithm"),la=s(" by PBS Infinite Series."),Wt=H(),Ie=o("p"),Y=s("The problem with this solution is that in order to find "),Qe=o("span"),ya=s(", we might have to check all possible values between "),Vt=o("span"),Ya=s(" and "),Xt=o("span"),Ma=s(" one after the other, which is an insane amount of computation if "),Gt=o("span"),Ia=s(" is number with several hundreds of digits. But that's only the case if we're trying with a classical computer."),this.h()},l(le){n=l(le,"H2",{});var ft=i(n);h=r(ft,"Solution"),ft.forEach(t),f=L(le),u=l(le,"P",{});var xt=i(u);y=r(xt,"The factoring problem can be solved with the following simple, but very time-consuming algorithm:"),xt.forEach(t),d=L(le),b=l(le,"OL",{});var he=i(b);g=l(he,"LI",{});var ba=i(g);w=l(ba,"P",{});var qe=i(w);B=r(qe,"We pick a random number "),k=l(qe,"SPAN",{});var za=i(k);za.forEach(t),C=r(qe," and make sure that "),P=l(qe,"SPAN",{});var Kt=i(P);Kt.forEach(t),re=r(qe," and "),S=l(qe,"SPAN",{});var gn=i(S);gn.forEach(t),j=r(qe," are relative primes, meaning "),E=l(qe,"SPAN",{});var Fa=i(E);Fa.forEach(t),A=r(qe,", where "),D=l(qe,"SPAN",{});var ta=i(D);ta.forEach(t),N=r(qe," stands for "),we(W.$$.fragment,qe),X=r(qe,". (In case "),Z=l(qe,"SPAN",{});var $a=i(Z);$a.forEach(t),V=r(qe," happens to be a factor of "),F=l(qe,"SPAN",{});var ha=i(F);ha.forEach(t),se=r(qe,", the entire problem is solved and no further steps are required, but that is highly unlikely if "),Se=l(qe,"SPAN",{});var At=i(Se);At.forEach(t),Fe=r(qe," is large.)"),qe.forEach(t),ba.forEach(t),te=L(he),v=l(he,"LI",{});var Va=i(v);T=l(Va,"P",{});var lt=i(T);G=r(lt,"Next, we construct the function "),U=l(lt,"SPAN",{});var ka=i(U);ka.forEach(t),He=r(lt," and find the smallest integer "),Ve=l(lt,"SPAN",{});var ja=i(Ve);ja.forEach(t),nt=r(lt," such that "),We=l(lt,"SPAN",{});var yn=i(We);yn.forEach(t),st=r(lt,". If "),Ce=l(lt,"SPAN",{});var Ta=i(Ce);Ta.forEach(t),gt=r(lt," turns out to be odd, we unfortunately have to repeat the entire procedure with a different "),Te=l(lt,"SPAN",{});var tn=i(Te);tn.forEach(t),oe=r(lt," parameter."),lt.forEach(t),Va.forEach(t),Re=L(he),_t=l(he,"LI",{});var va=i(_t);be=l(va,"P",{});var Ke=i(be);ht=r(Ke,"If we're lucky and "),fe=l(Ke,"SPAN",{});var hs=i(fe);hs.forEach(t),ce=r(Ke," is even, we can proceed. From the definition of "),R=l(Ke,"SPAN",{});var Da=i(R);Da.forEach(t),rt=r(Ke," follows that there's "),Ge=l(Ke,"SPAN",{});var me=i(Ge);me.forEach(t),ot=r(Ke," such that "),Ze=l(Ke,"SPAN",{});var $n=i(Ze);$n.forEach(t),ae=r(Ke,". We can then define the integer "),Me=l(Ke,"SPAN",{});var Na=i(Me);Na.forEach(t),Tt=r(Ke,", which means "),vt=l(Ke,"SPAN",{});var Ra=i(vt);Ra.forEach(t),Ue=r(Ke,". Also, we can make use of a well-known algebraic identity to write "),Et=l(Ke,"SPAN",{});var kn=i(Et);kn.forEach(t),Bt=r(Ke,". Putting together these three equations, we find that "),yt=l(Ke,"SPAN",{});var Ea=i(yt);Ea.forEach(t),Pt=r(Ke,"."),Ke.forEach(t),va.forEach(t),ca=L(he),$t=l(he,"LI",{});var Qa=i($t);Xe=l(Qa,"P",{});var ua=i(Xe);Ht=r(ua,"And then we're done, because the prime factors we're looking for are "),wt=l(ua,"SPAN",{});var Pa=i(wt);Pa.forEach(t),tt=r(ua," and "),ut=l(ua,"SPAN",{});var Wa=i(ut);Wa.forEach(t),St=r(ua,", and these are very easy to compute with the help of "),we(mt.$$.fragment,ua),_a=r(ua,"."),ua.forEach(t),Qa.forEach(t),he.forEach(t),kt=L(le),Ft=l(le,"P",{});var Ga=i(Ft);da=r(Ga,"For a more illuminating explanation, see the video "),pt=l(Ga,"A",{href:!0});var wa=i(pt);Zt=r(wa,"Hacking at Quantum Speed with Shor's Algorithm"),wa.forEach(t),la=r(Ga," by PBS Infinite Series."),Ga.forEach(t),Wt=L(le),Ie=l(le,"P",{});var Qt=i(Ie);Y=r(Qt,"The problem with this solution is that in order to find "),Qe=l(Qt,"SPAN",{});var Tn=i(Qe);Tn.forEach(t),ya=r(Qt,", we might have to check all possible values between "),Vt=l(Qt,"SPAN",{});var Sa=i(Vt);Sa.forEach(t),Ya=r(Qt," and "),Xt=l(Qt,"SPAN",{});var Ua=i(Xt);Ua.forEach(t),Ma=r(Qt," one after the other, which is an insane amount of computation if "),Gt=l(Qt,"SPAN",{});var Nn=i(Gt);Nn.forEach(t),Ia=r(Qt," is number with several hundreds of digits. But that's only the case if we're trying with a classical computer."),Qt.forEach(t),this.h()},h(){$e(pt,"href","https://www.youtube.com/watch?v=wUwZZaI5u0c&t=731s")},m(le,ft){c(le,n,ft),e(n,h),c(le,f,ft),c(le,u,ft),e(u,y),c(le,d,ft),c(le,b,ft),e(b,g),e(g,w),e(w,B),e(w,k),k.innerHTML=M,e(w,C),e(w,P),P.innerHTML=x,e(w,re),e(w,S),S.innerHTML=z,e(w,j),e(w,E),E.innerHTML=ee,e(w,A),e(w,D),D.innerHTML=I,e(w,N),ge(W,w,null),e(w,X),e(w,Z),Z.innerHTML=$,e(w,V),e(w,F),F.innerHTML=O,e(w,se),e(w,Se),Se.innerHTML=Ee,e(w,Fe),e(b,te),e(b,v),e(v,T),e(T,G),e(T,U),U.innerHTML=pe,e(T,He),e(T,Ve),Ve.innerHTML=Be,e(T,nt),e(T,We),We.innerHTML=ze,e(T,st),e(T,Ce),Ce.innerHTML=ke,e(T,gt),e(T,Te),Te.innerHTML=De,e(T,oe),e(b,Re),e(b,_t),e(_t,be),e(be,ht),e(be,fe),fe.innerHTML=J,e(be,ce),e(be,R),R.innerHTML=dt,e(be,rt),e(be,Ge),Ge.innerHTML=bt,e(be,ot),e(be,Ze),Ze.innerHTML=qt,e(be,ae),e(be,Me),Me.innerHTML=ne,e(be,Tt),e(be,vt),vt.innerHTML=Nt,e(be,Ue),e(be,Et),Et.innerHTML=Jt,e(be,Bt),e(be,yt),yt.innerHTML=Ct,e(be,Pt),e(b,ca),e(b,$t),e($t,Xe),e(Xe,Ht),e(Xe,wt),wt.innerHTML=Je,e(Xe,tt),e(Xe,ut),ut.innerHTML=Ne,e(Xe,St),ge(mt,Xe,null),e(Xe,_a),c(le,kt,ft),c(le,Ft,ft),e(Ft,da),e(Ft,pt),e(pt,Zt),e(Ft,la),c(le,Wt,ft),c(le,Ie,ft),e(Ie,Y),e(Ie,Qe),Qe.innerHTML=Oe,e(Ie,ya),e(Ie,Vt),Vt.innerHTML=Lt,e(Ie,Ya),e(Ie,Xt),Xt.innerHTML=Ae,e(Ie,Ma),e(Ie,Gt),Gt.innerHTML=ie,e(Ie,Ia),Ut=!0,ia||(xa=[p(k,"mouseenter",a[0]),p(P,"mouseenter",a[1]),p(S,"mouseenter",a[2]),p(E,"mouseenter",a[3]),p(D,"mouseenter",a[4]),p(Z,"mouseenter",a[5]),p(F,"mouseenter",a[6]),p(Se,"mouseenter",a[7]),p(U,"mouseenter",a[8]),p(Ve,"mouseenter",a[9]),p(We,"mouseenter",a[10]),p(Ce,"mouseenter",a[11]),p(Te,"mouseenter",a[12]),p(fe,"mouseenter",a[13]),p(R,"mouseenter",a[14]),p(Ge,"mouseenter",a[15]),p(Ze,"mouseenter",a[16]),p(Me,"mouseenter",a[17]),p(vt,"mouseenter",a[18]),p(Et,"mouseenter",a[19]),p(yt,"mouseenter",a[20]),p(wt,"mouseenter",a[21]),p(ut,"mouseenter",a[22]),p(Qe,"mouseenter",a[23]),p(Vt,"mouseenter",a[24]),p(Xt,"mouseenter",a[25]),p(Gt,"mouseenter",a[26])],ia=!0)},p(le,[ft]){const xt={};ft&134217728&&(xt.$$scope={dirty:ft,ctx:le}),W.$set(xt);const he={};ft&134217728&&(he.$$scope={dirty:ft,ctx:le}),mt.$set(he)},i(le){Ut||(ue(W.$$.fragment,le),ue(mt.$$.fragment,le),Ut=!0)},o(le){de(W.$$.fragment,le),de(mt.$$.fragment,le),Ut=!1},d(le){le&&t(n),le&&t(f),le&&t(u),le&&t(d),le&&t(b),ye(W),ye(mt),le&&t(kt),le&&t(Ft),le&&t(Wt),le&&t(Ie),ia=!1,Xa(xa)}}}function it(a){console.log(a)}function Mi(a){return[()=>it(["N","a"]),()=>it(["a"]),()=>it(["N"]),()=>it(["N","a"]),()=>it([]),()=>it(["a"]),()=>it(["N"]),()=>it(["N"]),()=>it(["r","N","f","a"]),()=>it(["r","N"]),()=>it(["r","f"]),()=>it(["r"]),()=>it(["a"]),()=>it(["r"]),()=>it(["r"]),()=>it(["N","m"]),()=>it(["r","N","m","a"]),()=>it(["b","r","a"]),()=>it(["b","r","a"]),()=>it(["b"]),()=>it(["b","N","m"]),()=>it(["r","N","a"]),()=>it(["r","N","a"]),()=>it(["r"]),()=>it([]),()=>it(["N"]),()=>it(["N"])]}class Ii extends sa{constructor(n){super(),ra(this,n,Mi,Li,oa,{})}}function zi(a){let n,h,f,u,y,d,b,g,w,B;return u=new Pi({}),d=new Ii({}),w=new ri({}),{c(){n=o("h2"),h=s("Factoring"),f=H(),ve(u.$$.fragment),y=H(),ve(d.$$.fragment),b=H(),g=o("div"),ve(w.$$.fragment),this.h()},l(k){n=l(k,"H2",{});var M=i(n);h=r(M,"Factoring"),M.forEach(t),f=L(k),we(u.$$.fragment,k),y=L(k),we(d.$$.fragment,k),b=L(k),g=l(k,"DIV",{class:!0});var C=i(g);we(w.$$.fragment,C),C.forEach(t),this.h()},h(){$e(g,"class","interaction")},m(k,M){c(k,n,M),e(n,h),c(k,f,M),ge(u,k,M),c(k,y,M),ge(d,k,M),c(k,b,M),c(k,g,M),ge(w,g,null),B=!0},p:Za,i(k){B||(ue(u.$$.fragment,k),ue(d.$$.fragment,k),ue(w.$$.fragment,k),B=!0)},o(k){de(u.$$.fragment,k),de(d.$$.fragment,k),de(w.$$.fragment,k),B=!1},d(k){k&&t(n),k&&t(f),ye(u,k),k&&t(y),ye(d,k),k&&t(b),k&&t(g),ye(w)}}}class Fi extends sa{constructor(n){super(),ra(this,n,null,zi,oa,{})}}function Vi(a){let n,h,f,u,y;return{c(){n=o("h2"),h=s("Fourier transform intro"),f=H(),u=o("p"),y=s("This part is unnecessary.")},l(d){n=l(d,"H2",{});var b=i(n);h=r(b,"Fourier transform intro"),b.forEach(t),f=L(d),u=l(d,"P",{});var g=i(u);y=r(g,"This part is unnecessary."),g.forEach(t)},m(d,b){c(d,n,b),e(n,h),c(d,f,b),c(d,u,b),e(u,y)},p:Za,i:Za,o:Za,d(d){d&&t(n),d&&t(f),d&&t(u)}}}class Qi extends sa{constructor(n){super(),ra(this,n,null,Vi,oa,{})}}const Bi='<a href="https://en.wikipedia.org/wiki/Binary_number"><h3>Binary number</h3></a><p>A <b>binary number</b> is a number expressed in the <b>base-2 numeral system</b> or <b>binary numeral system</b>, a method of mathematical expression which uses only two symbols: typically "0" (zero) and "1" (one).</p>',Ci=`<a href="https://en.wikipedia.org/wiki/Quantum_Fourier_transform"><h3>Quantum Fourier transform</h3></a><p>In quantum computing, the <b>quantum Fourier transform (QFT)</b> is a linear transformation on quantum bits, and is the quantum analogue of the discrete Fourier transform. The quantum Fourier transform is a part of many quantum algorithms, notably Shor's algorithm for factoring and computing the discrete logarithm, the quantum phase estimation algorithm for estimating the eigenvalues of a unitary operator, and algorithms for the hidden subgroup problem. The quantum Fourier transform was discovered by Don Coppersmith.</p>`;function xi(a){let n;return{c(){n=s("binary representations")},l(h){n=r(h,"binary representations")},m(h,f){c(h,n,f)},d(h){h&&t(n)}}}function ji(a){let n;return{c(){n=s("quantum Fourier transform")},l(h){n=r(h,"quantum Fourier transform")},m(h,f){c(h,n,f)},d(h){h&&t(n)}}}function Di(a){let n,h,f,u,y,d,b,g,w,B=m("n")+"",k,M,C=m("|0\\rangle")+"",P,x,re=m("|1\\rangle")+"",S,z,j=m("\\underbrace{2 \\cdot \\ldots \\cdot 2}_\\text{n times} = 2^n")+"",E,ee,A=m("N := 2^n")+"",D,I,N,W,X,Z,$,V=m("0")+"",F,O,se=m("N - 1")+"",Se,Ee,Fe=m("n = 5")+"",te,v,T=m("|0\\rangle \\otimes |1\\rangle \\otimes |0\\rangle \\otimes |0\\rangle \\otimes |1\\rangle")+"",G,U,pe=m("01001")+"",He,Ve,Be=m("0 \\cdot 2^4 + 1 \\cdot 2^3 + 0 \\cdot 2^2 + 0 \\cdot 2^1 + 1 \\cdot 2^0 = 0 + 8 + 0 + 0 + 1 = 9")+"",nt,We,ze,st,Ce,ke,gt,Te,De,oe,Re=m("x")+"",_t,be,ht=m("x = 9")+"",fe,J,ce=m("k")+"",R,dt,rt=m("\\frac{1}{\\sqrt{2}} \\left( |0\\rangle + e^{\\frac{2 \\pi i x}{2^k}} |1\\rangle \\right)")+"",Ge,bt,ot=m("\\alpha_k = \\frac{1}{\\sqrt{2}}")+"",Ze,qt,ae=m("\\beta_k = \\frac{1}{\\sqrt{2}} e^{\\frac{2 \\pi i x}{2^k}}")+"",Me,ne,Tt=m("k = 1, ..., n")+"",vt,Nt,Ue,Et,Jt,Bt=m("\\alpha_k \\neq \\beta_k")+"",yt,Ct,Pt=m("\\Vert{\\alpha_k}\\Vert^2 = \\Vert{\\beta_k}\\Vert^2 = \\frac{1}{2}")+"",ca,$t,Xe=m("k = 1, ..., n")+"",Ht,wt,Je=m("e^{\\frac{2 \\pi i x}{2^k}}")+"",tt,ut,Ne,St,mt,_a=m("|0\\rangle")+"",kt,Ft,da=m("|1\\rangle")+"",pt,Zt,la=m("n")+"",Wt,Ie,Y=m("n")+"",Qe,Oe,ya=m("0")+"",Vt,Lt,Ya=m("N - 1")+"",Xt,Ae,Ma=m("\\frac{1}{2}")+"",Gt,ie,Ia=m("n")+"",Ut,ia,xa=m("\\underbrace{\\frac{1}{2} \\cdot \\ldots \\cdot \\frac{1}{2}}_\\text{n terms} = \\frac{1}{2^n} = \\frac{1}{N}")+"",le,ft,xt,he,ba,qe,za,Kt,gn=m("|\\psi\\rangle")+"",Fa,ta,$a,ha,At=m("|\\psi\\rangle = \\underbrace{ \\frac{1}{\\sqrt{2}} \\left( |0\\rangle + e^{ \\frac{2 \\pi i x}{2^1} } |1\\rangle \\right) \\otimes \\ldots \\otimes \\frac{1}{\\sqrt{2}} \\left( |0\\rangle + e^{ \\frac{2 \\pi i x}{2^n} } |1\\rangle \\right) }_\\text{n terms}")+"",Va,lt,ka,ja,yn=m("\\frac{1}{\\sqrt{2}}")+"",Ta,tn,va,Ke,hs=m("|\\psi\\rangle = \\frac{1}{\\sqrt{2^n}} \\left(\\left( |0\\rangle + e^{\\frac{2 \\pi i x}{2^1}} |1\\rangle \\right) \\otimes \\ldots \\otimes \\left( |0\\rangle + e^{\\frac{2 \\pi i x}{2^n}} |1\\rangle \\right) \\right) = \\frac{1}{\\sqrt{N}} \\left(\\left( |0\\rangle + e^{\\frac{2 \\pi i x}{2^1}} |1\\rangle \\right) \\otimes \\ldots \\otimes \\left( |0\\rangle + e^{\\frac{2 \\pi i x}{2^n}} |1\\rangle \\right) \\right)")+"",Da,me,$n,Na,Ra=m("y")+"",kn,Ea,Qa=m("n")+"",ua,Pa,Wa=m("y_k")+"",Ga,wa,Qt=m("k")+"",Tn,Sa,Ua=m("y")+"",Nn,Ka,Pn=m("y_k = 0")+"",En,en,q=m("k")+"",_e,xe,Sn=m("|0\\rangle")+"",an,Ba,An=m("y_k = 1")+"",nn,Ca,qn=m("|1\\rangle")+"",sn,jt,xs=m("k = 1, \\ldots, n")+"",us,aa,js=m("y")+"",ms,rn,Mt=m("\\displaystyle{ y = \\sum_{k=1}^n y_k \\cdot 2^{n - k}}")+"",ps,on,Ds=m("2^n")+"",fs,ln,Rs=m("k")+"",cs,hn,Ts=m("\\displaystyle{ y = 2^n \\cdot \\sum_{k=1}^n y_k \\cdot 2^{-k} = N \\cdot \\sum_{k=1}^n \\frac{y_k}{2^k}}")+"",ma,Hn,un,ga,Ln,mn,Pe,Ws=m("|\\psi\\rangle = \\displaystyle{ \\frac{1}{\\sqrt{N}} \\underbrace{ \\sum_{y_1=0}^1 \\ldots \\sum_{y_{n}=0}^1}_\\text{n terms} \\overbrace{e^{\\frac{2 \\pi i x y_1}{2^1}} |y_1\\rangle \\otimes \\ldots \\otimes e^{\\frac{2 \\pi i x y_n}{2^n}}|y_n\\rangle}^\\text{n terms} }")+"",Mn,It,_s,pn,Gs=m("k")+"",ds,fn,Us=m("e^{\\frac{2 \\pi i x y_k}{2^k}}|y_k\\rangle")+"",bs,cn,Ks=m("e^{\\frac{2 \\pi i x \\cdot 0}{2^k}}|0\\rangle = 1 \\cdot |0\\rangle = |0\\rangle")+"",vs,_n,Zr=m("y_k = 0")+"",Os,In,Xr=m("e^{\\frac{2 \\pi i x \\cdot 1}{2^k}}|1\\rangle = e^{\\frac{2 \\pi i x }{2^k}}|1\\rangle")+"",Js,zn,Yr=m("y_k = 1")+"",Zs,Ns,Aa,Xs,Fn,eo=m("n")+"",Ys,ws,er,tr,gs,ar,nr,Es,dn,sr,ys,rr,or,Ps,Vn,Qn,to=m("|\\psi\\rangle = \\displaystyle{ \\frac{1}{\\sqrt{N}} \\sum_{y_1=0}^1 \\ldots \\sum_{y_{n}=0}^1 \\left( e^{\\frac{2 \\pi i x y_1}{2^1}} \\cdot \\ldots \\cdot e^{\\frac{2 \\pi i x y_n}{2^n}} \\right) \\left( |y_1\\rangle \\otimes \\ldots \\otimes |y_n\\rangle \\right)}")+"",Ss,Bn,Cn,ao=m("|\\psi\\rangle = \\displaystyle{ = \\frac{1}{\\sqrt{N}} \\sum_{y_1=0}^1 \\ldots \\sum_{y_{n}=0}^1 \\prod_{k=1}^n e^{\\frac{2 \\pi i x y_k}{2^k}} \\left( |y_1\\rangle \\otimes \\ldots \\otimes |y_n\\rangle \\right)}")+"",As,xn,lr,qs,jn,Dn,no=m("|\\psi\\rangle = \\displaystyle{ = \\frac{1}{\\sqrt{N}} \\sum_{y_1=0}^1 \\ldots \\sum_{y_{n}=0}^1 e^{\\sum_{k=1}^n \\frac{2 \\pi i x y_k}{2^k}} \\left( |y_1\\rangle \\otimes \\ldots \\otimes |y_n\\rangle \\right)}")+"",Hs,Oa,ir,Rn,so=m("2 \\pi i x")+"",hr,Wn,ro=m("k")+"",ur,Ls,Gn,Un,oo=m("|\\psi\\rangle = \\displaystyle{ = \\frac{1}{\\sqrt{N}} \\sum_{y_1=0}^1 \\ldots \\sum_{y_{n}=0}^1 e^{2 \\pi i x \\sum_{k=1}^n \\frac{y_k}{2^k}} \\left( |y_1\\rangle \\otimes \\ldots \\otimes |y_n\\rangle \\right)}")+"",Ms,Dt,mr,Kn,lo=m("\\displaystyle{ \\sum_{k=1}^n \\frac{y_k}{2^k}}")+"",pr,On,io=m("\\frac{y}{N}")+"",fr,Jn,ho=m("y_k")+"",cr,Zn,uo=m("y")+"",_r,Xn,mo=m("y")+"",dr,Yn,po=m("|y\\rangle = |y_1\\rangle \\otimes \\ldots \\otimes |y_n\\rangle")+"",br,Is,es,ts,fo=m("|\\psi\\rangle = \\displaystyle{ \\frac{1}{\\sqrt{N}} \\sum_{y=0}^{N - 1} e^{\\frac{2 \\pi i x y}{N}} |y\\rangle}")+"",zs,as,vr,Fs,Yt,wr,ns,co=m("x")+"",gr,ss,_o=m("e^{\\frac{2 \\pi i x y}{N}}")+"",yr,rs,bo=m("y")+"",$r,os,vo=m("x")+"",kr,ls,wo=m("x")+"",Tr,Vs,Nr,Ar;return X=new at({props:{hovertext:Bi,$$slots:{default:[xi]},$$scope:{ctx:a}}}),Te=new at({props:{hovertext:Ci,$$slots:{default:[ji]},$$scope:{ctx:a}}}),{c(){n=o("h2"),h=s("Quantum Fourier transform (QFT)"),f=H(),u=o("h2"),y=s("Representing numbers with qubits"),d=H(),b=o("p"),g=s("Consider "),w=o("span"),k=s(" qubits aranged in a row, each of which are in either of the two basis states "),M=o("span"),P=s(" or "),x=o("span"),S=s(". With a little combinatorics, we can see that there are "),z=o("span"),E=s(" such combinations. For ease of notation, let "),ee=o("span"),D=s("."),I=H(),N=o("p"),W=s("For our purposes, we'll interpret these combinations as the "),ve(X.$$.fragment),Z=s(" of the numbers from "),$=o("span"),F=s(" to "),O=o("span"),Se=s(". For example, let "),Ee=o("span"),te=s(" and the qubits be in the following state: "),v=o("span"),G=s('. We can "read out" this state as the binary number '),U=o("span"),He=s(", which is equal to "),Ve=o("span"),nt=s("."),We=H(),ze=o("h2"),st=s("QFT on the qubit level"),Ce=H(),ke=o("p"),gt=s("The "),ve(Te.$$.fragment),De=s(" is an operation that modifies the states of qubits in a particular way. (How this is done in practice is another topic, for now we'll only look at the mathematics.) Namely, if "),oe=o("span"),_t=s(" is the number represented by the qubits (in the example above, "),be=o("span"),fe=s("), the QFT sets the state of the "),J=o("span"),R=s("-th qubit to "),dt=o("span"),Ge=s(". In other words, it sets "),bt=o("span"),Ze=s(" and "),qt=o("span"),Me=s(" for all "),ne=o("span"),vt=s("."),Nt=H(),Ue=o("p"),Et=s("Notice that even though "),Jt=o("span"),yt=s(", the associated measurement probabilities "),Ct=o("span"),ca=s(" for all "),$t=o("span"),Ht=s(". This is because the "),wt=o("span"),tt=s(" term - as we saw in the section about the Bloch-sphere - indicates the qubit's phase and does not affect measurement probabilities."),ut=H(),Ne=o("p"),St=s("Just like the state of a single qubit can be the linear combination of "),mt=o("span"),kt=s(" and "),Ft=o("span"),pt=s(", the state of these "),Zt=o("span"),Wt=s(" qubits is essentially the linear combination of all the possible combinations of the "),Ie=o("span"),Qe=s(" basis states - which, as we saw in the previous section, represent the integers from "),Oe=o("span"),Vt=s(" to "),Lt=o("span"),Xt=s(". Since both basis states are measured with a probability of "),Ae=o("span"),Gt=s(" for each qubit, one particular combination of the "),ie=o("span"),Ut=s(" basis states is measured with a probability of "),ia=o("span"),le=s(". What differs across these combinations is the phase, as we'll see in the next section."),ft=H(),xt=o("h2"),he=s("QFT on the representation level"),ba=H(),qe=o("p"),za=s("Let's denote the state of the entire sequence of qubits with "),Kt=o("span"),Fa=s(" and write it out as shown below:"),ta=H(),$a=o("p"),ha=o("span"),Va=H(),lt=o("p"),ka=s("We can factor out the "),ja=o("span"),Ta=s(" term to get:"),tn=H(),va=o("p"),Ke=o("span"),Da=H(),me=o("p"),$n=s("Let "),Na=o("span"),kn=s(" denote the binary number represented by the "),Ea=o("span"),ua=s(" qubits in a given basis state, and "),Pa=o("span"),Ga=s(" the "),wa=o("span"),Tn=s("-th digit of "),Sa=o("span"),Nn=s(". In other words, "),Ka=o("span"),En=s("\xA0if the "),en=o("span"),_e=s("-th qubit is in the "),xe=o("span"),an=s(" state, and "),Ba=o("span"),nn=s("\xA0if it's in the "),Ca=o("span"),sn=s(" state for all "),jt=o("span"),us=s(". Recalling our knowledge of binary numbers, we can write "),aa=o("span"),ms=s(" as the weighted sum of its digits: "),rn=o("span"),ps=s(". Notice that the "),on=o("span"),fs=s(" term within the sum does not depend on "),ln=o("span"),cs=s(" and so we can factor it out: "),hn=o("span"),ma=s(". Remember this step, as it is going to be important shortly!"),Hn=H(),un=o("p"),ga=s("Using this new notation, we can write the state of the qubits in the form of a sum instead of a product:"),Ln=H(),mn=o("p"),Pe=o("span"),Mn=H(),It=o("p"),_s=s("In case you're wondering how the formula above can be derived from the definition we started with, note that for all "),pn=o("span"),ds=s(", the term "),fn=o("span"),bs=s(` equals
* `),cn=o("span"),vs=s(" if "),_n=o("span"),Os=s(`, and
* `),In=o("span"),Js=s(" if "),zn=o("span"),Zs=s(", which is exactly how we defined the QFT."),Ns=H(),Aa=o("p"),Xs=s("The "),Fn=o("span"),Ys=s(" embedded summations might seem confusing at first, but what they actually do is iterate over all possible combinations of basis states. In the final sum, these are included with "),ws=o("em"),er=s("equal weight"),tr=s(" (meaning they are measured with equal probability), but the composing basis states will have "),gs=o("em"),ar=s("different phases"),nr=s(" in each combination, as already mentioned at the end of the previous section."),Es=H(),dn=o("p"),sr=s("Let's now define the "),ys=o("em"),rr=s("phase of the combination"),or=s(" as the product of the phases of individual qubits within that combination, and factor it out as shown below:"),Ps=H(),Vn=o("p"),Qn=o("span"),Ss=H(),Bn=o("p"),Cn=o("span"),As=H(),xn=o("p"),lr=s("After making use of the product rule for exponents..."),qs=H(),jn=o("p"),Dn=o("span"),Hs=H(),Oa=o("p"),ir=s("and factoring out the "),Rn=o("span"),hr=s(" term that does not depend on "),Wn=o("span"),ur=s(", we arrive at the formula below:"),Ls=H(),Gn=o("p"),Un=o("span"),Ms=H(),Dt=o("p"),mr=s("Recall what I asked you to keep in mind a few paragraphs ago, and notice that the sum in the exponential "),Kn=o("span"),pr=s(" is actually equal to "),On=o("span"),fr=s(". Thus, we can now replace the individual "),Jn=o("span"),cr=s(" digits with the number "),Zn=o("span"),_r=s(" itself and the multiple, embedded summations with a single one that iterates over all possible values of "),Xn=o("span"),dr=s(". In addition, let's abbreviate the notation we used for the product of the basis states with "),Yn=o("span"),br=s(", to finally obtain this way more elegant formula for the QFT:"),Is=H(),es=o("p"),ts=o("span"),zs=H(),as=o("p"),vr=s("The elegance comes from the fact that it shows what the qubits represent on a symbolic level, as opposed to the expression we started with that is a direct insight into the bit-level implementation."),Fs=H(),Yt=o("p"),wr=s("Now let's illustrate visually what the formula above actually means. To give a proper intuition, we'll look at multiple systems with increasing number of qubits. For a chosen value of "),ns=o("span"),gr=s(", the plot below shows the "),ss=o("span"),yr=s(" terms for all possible values of "),rs=o("span"),$r=s(" that these systems can represent. Because this term is a complex number, the geometric representation of which would require two dimensions, the real and imaginary components are shown separately. Notice that as the number of qubits increases, the plots gradually turn into sinusoidal wave patterns. Furthermore, the number of peaks of these waves - their frequency - equals "),os=o("span"),kr=s(", which you can verify by modifying "),ls=o("span"),Tr=s(" with the help of the slider.")},l(_){n=l(_,"H2",{});var K=i(n);h=r(K,"Quantum Fourier transform (QFT)"),K.forEach(t),f=L(_),u=l(_,"H2",{});var $s=i(u);y=r($s,"Representing numbers with qubits"),$s.forEach(t),d=L(_),b=l(_,"P",{});var na=i(b);g=r(na,"Consider "),w=l(na,"SPAN",{});var go=i(w);go.forEach(t),k=r(na," qubits aranged in a row, each of which are in either of the two basis states "),M=l(na,"SPAN",{});var yo=i(M);yo.forEach(t),P=r(na," or "),x=l(na,"SPAN",{});var $o=i(x);$o.forEach(t),S=r(na,". With a little combinatorics, we can see that there are "),z=l(na,"SPAN",{});var ko=i(z);ko.forEach(t),E=r(na," such combinations. For ease of notation, let "),ee=l(na,"SPAN",{});var To=i(ee);To.forEach(t),D=r(na,"."),na.forEach(t),I=L(_),N=l(_,"P",{});var ea=i(N);W=r(ea,"For our purposes, we'll interpret these combinations as the "),we(X.$$.fragment,ea),Z=r(ea," of the numbers from "),$=l(ea,"SPAN",{});var No=i($);No.forEach(t),F=r(ea," to "),O=l(ea,"SPAN",{});var Eo=i(O);Eo.forEach(t),Se=r(ea,". For example, let "),Ee=l(ea,"SPAN",{});var Po=i(Ee);Po.forEach(t),te=r(ea," and the qubits be in the following state: "),v=l(ea,"SPAN",{});var So=i(v);So.forEach(t),G=r(ea,'. We can "read out" this state as the binary number '),U=l(ea,"SPAN",{});var Ao=i(U);Ao.forEach(t),He=r(ea,", which is equal to "),Ve=l(ea,"SPAN",{});var qo=i(Ve);qo.forEach(t),nt=r(ea,"."),ea.forEach(t),We=L(_),ze=l(_,"H2",{});var qr=i(ze);st=r(qr,"QFT on the qubit level"),qr.forEach(t),Ce=L(_),ke=l(_,"P",{});var Rt=i(ke);gt=r(Rt,"The "),we(Te.$$.fragment,Rt),De=r(Rt," is an operation that modifies the states of qubits in a particular way. (How this is done in practice is another topic, for now we'll only look at the mathematics.) Namely, if "),oe=l(Rt,"SPAN",{});var Ho=i(oe);Ho.forEach(t),_t=r(Rt," is the number represented by the qubits (in the example above, "),be=l(Rt,"SPAN",{});var Lo=i(be);Lo.forEach(t),fe=r(Rt,"), the QFT sets the state of the "),J=l(Rt,"SPAN",{});var Mo=i(J);Mo.forEach(t),R=r(Rt,"-th qubit to "),dt=l(Rt,"SPAN",{});var Io=i(dt);Io.forEach(t),Ge=r(Rt,". In other words, it sets "),bt=l(Rt,"SPAN",{});var zo=i(bt);zo.forEach(t),Ze=r(Rt," and "),qt=l(Rt,"SPAN",{});var Fo=i(qt);Fo.forEach(t),Me=r(Rt," for all "),ne=l(Rt,"SPAN",{});var Vo=i(ne);Vo.forEach(t),vt=r(Rt,"."),Rt.forEach(t),Nt=L(_),Ue=l(_,"P",{});var Ja=i(Ue);Et=r(Ja,"Notice that even though "),Jt=l(Ja,"SPAN",{});var Qo=i(Jt);Qo.forEach(t),yt=r(Ja,", the associated measurement probabilities "),Ct=l(Ja,"SPAN",{});var Bo=i(Ct);Bo.forEach(t),ca=r(Ja," for all "),$t=l(Ja,"SPAN",{});var Co=i($t);Co.forEach(t),Ht=r(Ja,". This is because the "),wt=l(Ja,"SPAN",{});var xo=i(wt);xo.forEach(t),tt=r(Ja," term - as we saw in the section about the Bloch-sphere - indicates the qubit's phase and does not affect measurement probabilities."),Ja.forEach(t),ut=L(_),Ne=l(_,"P",{});var zt=i(Ne);St=r(zt,"Just like the state of a single qubit can be the linear combination of "),mt=l(zt,"SPAN",{});var jo=i(mt);jo.forEach(t),kt=r(zt," and "),Ft=l(zt,"SPAN",{});var Do=i(Ft);Do.forEach(t),pt=r(zt,", the state of these "),Zt=l(zt,"SPAN",{});var Ro=i(Zt);Ro.forEach(t),Wt=r(zt," qubits is essentially the linear combination of all the possible combinations of the "),Ie=l(zt,"SPAN",{});var Wo=i(Ie);Wo.forEach(t),Qe=r(zt," basis states - which, as we saw in the previous section, represent the integers from "),Oe=l(zt,"SPAN",{});var Go=i(Oe);Go.forEach(t),Vt=r(zt," to "),Lt=l(zt,"SPAN",{});var Uo=i(Lt);Uo.forEach(t),Xt=r(zt,". Since both basis states are measured with a probability of "),Ae=l(zt,"SPAN",{});var Ko=i(Ae);Ko.forEach(t),Gt=r(zt," for each qubit, one particular combination of the "),ie=l(zt,"SPAN",{});var Oo=i(ie);Oo.forEach(t),Ut=r(zt," basis states is measured with a probability of "),ia=l(zt,"SPAN",{});var Jo=i(ia);Jo.forEach(t),le=r(zt,". What differs across these combinations is the phase, as we'll see in the next section."),zt.forEach(t),ft=L(_),xt=l(_,"H2",{});var Hr=i(xt);he=r(Hr,"QFT on the representation level"),Hr.forEach(t),ba=L(_),qe=l(_,"P",{});var Qs=i(qe);za=r(Qs,"Let's denote the state of the entire sequence of qubits with "),Kt=l(Qs,"SPAN",{});var Zo=i(Kt);Zo.forEach(t),Fa=r(Qs," and write it out as shown below:"),Qs.forEach(t),ta=L(_),$a=l(_,"P",{});var Lr=i($a);ha=l(Lr,"SPAN",{});var Xo=i(ha);Xo.forEach(t),Lr.forEach(t),Va=L(_),lt=l(_,"P",{});var Bs=i(lt);ka=r(Bs,"We can factor out the "),ja=l(Bs,"SPAN",{});var Yo=i(ja);Yo.forEach(t),Ta=r(Bs," term to get:"),Bs.forEach(t),tn=L(_),va=l(_,"P",{});var Mr=i(va);Ke=l(Mr,"SPAN",{});var el=i(Ke);el.forEach(t),Mr.forEach(t),Da=L(_),me=l(_,"P",{});var je=i(me);$n=r(je,"Let "),Na=l(je,"SPAN",{});var tl=i(Na);tl.forEach(t),kn=r(je," denote the binary number represented by the "),Ea=l(je,"SPAN",{});var al=i(Ea);al.forEach(t),ua=r(je," qubits in a given basis state, and "),Pa=l(je,"SPAN",{});var nl=i(Pa);nl.forEach(t),Ga=r(je," the "),wa=l(je,"SPAN",{});var sl=i(wa);sl.forEach(t),Tn=r(je,"-th digit of "),Sa=l(je,"SPAN",{});var rl=i(Sa);rl.forEach(t),Nn=r(je,". In other words, "),Ka=l(je,"SPAN",{});var ol=i(Ka);ol.forEach(t),En=r(je,"\xA0if the "),en=l(je,"SPAN",{});var ll=i(en);ll.forEach(t),_e=r(je,"-th qubit is in the "),xe=l(je,"SPAN",{});var il=i(xe);il.forEach(t),an=r(je," state, and "),Ba=l(je,"SPAN",{});var hl=i(Ba);hl.forEach(t),nn=r(je,"\xA0if it's in the "),Ca=l(je,"SPAN",{});var ul=i(Ca);ul.forEach(t),sn=r(je," state for all "),jt=l(je,"SPAN",{});var ml=i(jt);ml.forEach(t),us=r(je,". Recalling our knowledge of binary numbers, we can write "),aa=l(je,"SPAN",{});var pl=i(aa);pl.forEach(t),ms=r(je," as the weighted sum of its digits: "),rn=l(je,"SPAN",{});var fl=i(rn);fl.forEach(t),ps=r(je,". Notice that the "),on=l(je,"SPAN",{});var cl=i(on);cl.forEach(t),fs=r(je," term within the sum does not depend on "),ln=l(je,"SPAN",{});var _l=i(ln);_l.forEach(t),cs=r(je," and so we can factor it out: "),hn=l(je,"SPAN",{});var dl=i(hn);dl.forEach(t),ma=r(je,". Remember this step, as it is going to be important shortly!"),je.forEach(t),Hn=L(_),un=l(_,"P",{});var Ir=i(un);ga=r(Ir,"Using this new notation, we can write the state of the qubits in the form of a sum instead of a product:"),Ir.forEach(t),Ln=L(_),mn=l(_,"P",{});var zr=i(mn);Pe=l(zr,"SPAN",{});var bl=i(Pe);bl.forEach(t),zr.forEach(t),Mn=L(_),It=l(_,"P",{});var pa=i(It);_s=r(pa,"In case you're wondering how the formula above can be derived from the definition we started with, note that for all "),pn=l(pa,"SPAN",{});var vl=i(pn);vl.forEach(t),ds=r(pa,", the term "),fn=l(pa,"SPAN",{});var wl=i(fn);wl.forEach(t),bs=r(pa,` equals
* `),cn=l(pa,"SPAN",{});var gl=i(cn);gl.forEach(t),vs=r(pa," if "),_n=l(pa,"SPAN",{});var yl=i(_n);yl.forEach(t),Os=r(pa,`, and
* `),In=l(pa,"SPAN",{});var $l=i(In);$l.forEach(t),Js=r(pa," if "),zn=l(pa,"SPAN",{});var kl=i(zn);kl.forEach(t),Zs=r(pa,", which is exactly how we defined the QFT."),pa.forEach(t),Ns=L(_),Aa=l(_,"P",{});var bn=i(Aa);Xs=r(bn,"The "),Fn=l(bn,"SPAN",{});var Tl=i(Fn);Tl.forEach(t),Ys=r(bn," embedded summations might seem confusing at first, but what they actually do is iterate over all possible combinations of basis states. In the final sum, these are included with "),ws=l(bn,"EM",{});var Fr=i(ws);er=r(Fr,"equal weight"),Fr.forEach(t),tr=r(bn," (meaning they are measured with equal probability), but the composing basis states will have "),gs=l(bn,"EM",{});var Vr=i(gs);ar=r(Vr,"different phases"),Vr.forEach(t),nr=r(bn," in each combination, as already mentioned at the end of the previous section."),bn.forEach(t),Es=L(_),dn=l(_,"P",{});var Cs=i(dn);sr=r(Cs,"Let's now define the "),ys=l(Cs,"EM",{});var Qr=i(ys);rr=r(Qr,"phase of the combination"),Qr.forEach(t),or=r(Cs," as the product of the phases of individual qubits within that combination, and factor it out as shown below:"),Cs.forEach(t),Ps=L(_),Vn=l(_,"P",{});var Br=i(Vn);Qn=l(Br,"SPAN",{});var Nl=i(Qn);Nl.forEach(t),Br.forEach(t),Ss=L(_),Bn=l(_,"P",{});var Cr=i(Bn);Cn=l(Cr,"SPAN",{});var El=i(Cn);El.forEach(t),Cr.forEach(t),As=L(_),xn=l(_,"P",{});var xr=i(xn);lr=r(xr,"After making use of the product rule for exponents..."),xr.forEach(t),qs=L(_),jn=l(_,"P",{});var jr=i(jn);Dn=l(jr,"SPAN",{});var Pl=i(Dn);Pl.forEach(t),jr.forEach(t),Hs=L(_),Oa=l(_,"P",{});var is=i(Oa);ir=r(is,"and factoring out the "),Rn=l(is,"SPAN",{});var Sl=i(Rn);Sl.forEach(t),hr=r(is," term that does not depend on "),Wn=l(is,"SPAN",{});var Al=i(Wn);Al.forEach(t),ur=r(is,", we arrive at the formula below:"),is.forEach(t),Ls=L(_),Gn=l(_,"P",{});var Dr=i(Gn);Un=l(Dr,"SPAN",{});var ql=i(Un);ql.forEach(t),Dr.forEach(t),Ms=L(_),Dt=l(_,"P",{});var fa=i(Dt);mr=r(fa,"Recall what I asked you to keep in mind a few paragraphs ago, and notice that the sum in the exponential "),Kn=l(fa,"SPAN",{});var Hl=i(Kn);Hl.forEach(t),pr=r(fa," is actually equal to "),On=l(fa,"SPAN",{});var Ll=i(On);Ll.forEach(t),fr=r(fa,". Thus, we can now replace the individual "),Jn=l(fa,"SPAN",{});var Ml=i(Jn);Ml.forEach(t),cr=r(fa," digits with the number "),Zn=l(fa,"SPAN",{});var Il=i(Zn);Il.forEach(t),_r=r(fa," itself and the multiple, embedded summations with a single one that iterates over all possible values of "),Xn=l(fa,"SPAN",{});var zl=i(Xn);zl.forEach(t),dr=r(fa,". In addition, let's abbreviate the notation we used for the product of the basis states with "),Yn=l(fa,"SPAN",{});var Fl=i(Yn);Fl.forEach(t),br=r(fa,", to finally obtain this way more elegant formula for the QFT:"),fa.forEach(t),Is=L(_),es=l(_,"P",{});var Rr=i(es);ts=l(Rr,"SPAN",{});var Vl=i(ts);Vl.forEach(t),Rr.forEach(t),zs=L(_),as=l(_,"P",{});var Wr=i(as);vr=r(Wr,"The elegance comes from the fact that it shows what the qubits represent on a symbolic level, as opposed to the expression we started with that is a direct insight into the bit-level implementation."),Wr.forEach(t),Fs=L(_),Yt=l(_,"P",{});var qa=i(Yt);wr=r(qa,"Now let's illustrate visually what the formula above actually means. To give a proper intuition, we'll look at multiple systems with increasing number of qubits. For a chosen value of "),ns=l(qa,"SPAN",{});var Ql=i(ns);Ql.forEach(t),gr=r(qa,", the plot below shows the "),ss=l(qa,"SPAN",{});var Bl=i(ss);Bl.forEach(t),yr=r(qa," terms for all possible values of "),rs=l(qa,"SPAN",{});var Cl=i(rs);Cl.forEach(t),$r=r(qa," that these systems can represent. Because this term is a complex number, the geometric representation of which would require two dimensions, the real and imaginary components are shown separately. Notice that as the number of qubits increases, the plots gradually turn into sinusoidal wave patterns. Furthermore, the number of peaks of these waves - their frequency - equals "),os=l(qa,"SPAN",{});var xl=i(os);xl.forEach(t),kr=r(qa,", which you can verify by modifying "),ls=l(qa,"SPAN",{});var jl=i(ls);jl.forEach(t),Tr=r(qa," with the help of the slider."),qa.forEach(t)},m(_,K){c(_,n,K),e(n,h),c(_,f,K),c(_,u,K),e(u,y),c(_,d,K),c(_,b,K),e(b,g),e(b,w),w.innerHTML=B,e(b,k),e(b,M),M.innerHTML=C,e(b,P),e(b,x),x.innerHTML=re,e(b,S),e(b,z),z.innerHTML=j,e(b,E),e(b,ee),ee.innerHTML=A,e(b,D),c(_,I,K),c(_,N,K),e(N,W),ge(X,N,null),e(N,Z),e(N,$),$.innerHTML=V,e(N,F),e(N,O),O.innerHTML=se,e(N,Se),e(N,Ee),Ee.innerHTML=Fe,e(N,te),e(N,v),v.innerHTML=T,e(N,G),e(N,U),U.innerHTML=pe,e(N,He),e(N,Ve),Ve.innerHTML=Be,e(N,nt),c(_,We,K),c(_,ze,K),e(ze,st),c(_,Ce,K),c(_,ke,K),e(ke,gt),ge(Te,ke,null),e(ke,De),e(ke,oe),oe.innerHTML=Re,e(ke,_t),e(ke,be),be.innerHTML=ht,e(ke,fe),e(ke,J),J.innerHTML=ce,e(ke,R),e(ke,dt),dt.innerHTML=rt,e(ke,Ge),e(ke,bt),bt.innerHTML=ot,e(ke,Ze),e(ke,qt),qt.innerHTML=ae,e(ke,Me),e(ke,ne),ne.innerHTML=Tt,e(ke,vt),c(_,Nt,K),c(_,Ue,K),e(Ue,Et),e(Ue,Jt),Jt.innerHTML=Bt,e(Ue,yt),e(Ue,Ct),Ct.innerHTML=Pt,e(Ue,ca),e(Ue,$t),$t.innerHTML=Xe,e(Ue,Ht),e(Ue,wt),wt.innerHTML=Je,e(Ue,tt),c(_,ut,K),c(_,Ne,K),e(Ne,St),e(Ne,mt),mt.innerHTML=_a,e(Ne,kt),e(Ne,Ft),Ft.innerHTML=da,e(Ne,pt),e(Ne,Zt),Zt.innerHTML=la,e(Ne,Wt),e(Ne,Ie),Ie.innerHTML=Y,e(Ne,Qe),e(Ne,Oe),Oe.innerHTML=ya,e(Ne,Vt),e(Ne,Lt),Lt.innerHTML=Ya,e(Ne,Xt),e(Ne,Ae),Ae.innerHTML=Ma,e(Ne,Gt),e(Ne,ie),ie.innerHTML=Ia,e(Ne,Ut),e(Ne,ia),ia.innerHTML=xa,e(Ne,le),c(_,ft,K),c(_,xt,K),e(xt,he),c(_,ba,K),c(_,qe,K),e(qe,za),e(qe,Kt),Kt.innerHTML=gn,e(qe,Fa),c(_,ta,K),c(_,$a,K),e($a,ha),ha.innerHTML=At,c(_,Va,K),c(_,lt,K),e(lt,ka),e(lt,ja),ja.innerHTML=yn,e(lt,Ta),c(_,tn,K),c(_,va,K),e(va,Ke),Ke.innerHTML=hs,c(_,Da,K),c(_,me,K),e(me,$n),e(me,Na),Na.innerHTML=Ra,e(me,kn),e(me,Ea),Ea.innerHTML=Qa,e(me,ua),e(me,Pa),Pa.innerHTML=Wa,e(me,Ga),e(me,wa),wa.innerHTML=Qt,e(me,Tn),e(me,Sa),Sa.innerHTML=Ua,e(me,Nn),e(me,Ka),Ka.innerHTML=Pn,e(me,En),e(me,en),en.innerHTML=q,e(me,_e),e(me,xe),xe.innerHTML=Sn,e(me,an),e(me,Ba),Ba.innerHTML=An,e(me,nn),e(me,Ca),Ca.innerHTML=qn,e(me,sn),e(me,jt),jt.innerHTML=xs,e(me,us),e(me,aa),aa.innerHTML=js,e(me,ms),e(me,rn),rn.innerHTML=Mt,e(me,ps),e(me,on),on.innerHTML=Ds,e(me,fs),e(me,ln),ln.innerHTML=Rs,e(me,cs),e(me,hn),hn.innerHTML=Ts,e(me,ma),c(_,Hn,K),c(_,un,K),e(un,ga),c(_,Ln,K),c(_,mn,K),e(mn,Pe),Pe.innerHTML=Ws,c(_,Mn,K),c(_,It,K),e(It,_s),e(It,pn),pn.innerHTML=Gs,e(It,ds),e(It,fn),fn.innerHTML=Us,e(It,bs),e(It,cn),cn.innerHTML=Ks,e(It,vs),e(It,_n),_n.innerHTML=Zr,e(It,Os),e(It,In),In.innerHTML=Xr,e(It,Js),e(It,zn),zn.innerHTML=Yr,e(It,Zs),c(_,Ns,K),c(_,Aa,K),e(Aa,Xs),e(Aa,Fn),Fn.innerHTML=eo,e(Aa,Ys),e(Aa,ws),e(ws,er),e(Aa,tr),e(Aa,gs),e(gs,ar),e(Aa,nr),c(_,Es,K),c(_,dn,K),e(dn,sr),e(dn,ys),e(ys,rr),e(dn,or),c(_,Ps,K),c(_,Vn,K),e(Vn,Qn),Qn.innerHTML=to,c(_,Ss,K),c(_,Bn,K),e(Bn,Cn),Cn.innerHTML=ao,c(_,As,K),c(_,xn,K),e(xn,lr),c(_,qs,K),c(_,jn,K),e(jn,Dn),Dn.innerHTML=no,c(_,Hs,K),c(_,Oa,K),e(Oa,ir),e(Oa,Rn),Rn.innerHTML=so,e(Oa,hr),e(Oa,Wn),Wn.innerHTML=ro,e(Oa,ur),c(_,Ls,K),c(_,Gn,K),e(Gn,Un),Un.innerHTML=oo,c(_,Ms,K),c(_,Dt,K),e(Dt,mr),e(Dt,Kn),Kn.innerHTML=lo,e(Dt,pr),e(Dt,On),On.innerHTML=io,e(Dt,fr),e(Dt,Jn),Jn.innerHTML=ho,e(Dt,cr),e(Dt,Zn),Zn.innerHTML=uo,e(Dt,_r),e(Dt,Xn),Xn.innerHTML=mo,e(Dt,dr),e(Dt,Yn),Yn.innerHTML=po,e(Dt,br),c(_,Is,K),c(_,es,K),e(es,ts),ts.innerHTML=fo,c(_,zs,K),c(_,as,K),e(as,vr),c(_,Fs,K),c(_,Yt,K),e(Yt,wr),e(Yt,ns),ns.innerHTML=co,e(Yt,gr),e(Yt,ss),ss.innerHTML=_o,e(Yt,yr),e(Yt,rs),rs.innerHTML=bo,e(Yt,$r),e(Yt,os),os.innerHTML=vo,e(Yt,kr),e(Yt,ls),ls.innerHTML=wo,e(Yt,Tr),Vs=!0,Nr||(Ar=[p(w,"mouseenter",a[0]),p(M,"mouseenter",a[1]),p(x,"mouseenter",a[2]),p(z,"mouseenter",a[3]),p(ee,"mouseenter",a[4]),p($,"mouseenter",a[5]),p(O,"mouseenter",a[6]),p(Ee,"mouseenter",a[7]),p(v,"mouseenter",a[8]),p(U,"mouseenter",a[9]),p(Ve,"mouseenter",a[10]),p(oe,"mouseenter",a[11]),p(be,"mouseenter",a[12]),p(J,"mouseenter",a[13]),p(dt,"mouseenter",a[14]),p(bt,"mouseenter",a[15]),p(qt,"mouseenter",a[16]),p(ne,"mouseenter",a[17]),p(Jt,"mouseenter",a[18]),p(Ct,"mouseenter",a[19]),p($t,"mouseenter",a[20]),p(wt,"mouseenter",a[21]),p(mt,"mouseenter",a[22]),p(Ft,"mouseenter",a[23]),p(Zt,"mouseenter",a[24]),p(Ie,"mouseenter",a[25]),p(Oe,"mouseenter",a[26]),p(Lt,"mouseenter",a[27]),p(Ae,"mouseenter",a[28]),p(ie,"mouseenter",a[29]),p(ia,"mouseenter",a[30]),p(Kt,"mouseenter",a[31]),p(ha,"mouseenter",a[32]),p(ja,"mouseenter",a[33]),p(Ke,"mouseenter",a[34]),p(Na,"mouseenter",a[35]),p(Ea,"mouseenter",a[36]),p(Pa,"mouseenter",a[37]),p(wa,"mouseenter",a[38]),p(Sa,"mouseenter",a[39]),p(Ka,"mouseenter",a[40]),p(en,"mouseenter",a[41]),p(xe,"mouseenter",a[42]),p(Ba,"mouseenter",a[43]),p(Ca,"mouseenter",a[44]),p(jt,"mouseenter",a[45]),p(aa,"mouseenter",a[46]),p(rn,"mouseenter",a[47]),p(on,"mouseenter",a[48]),p(ln,"mouseenter",a[49]),p(hn,"mouseenter",a[50]),p(Pe,"mouseenter",a[51]),p(pn,"mouseenter",a[52]),p(fn,"mouseenter",a[53]),p(cn,"mouseenter",a[54]),p(_n,"mouseenter",a[55]),p(In,"mouseenter",a[56]),p(zn,"mouseenter",a[57]),p(Fn,"mouseenter",a[58]),p(Qn,"mouseenter",a[59]),p(Cn,"mouseenter",a[60]),p(Dn,"mouseenter",a[61]),p(Rn,"mouseenter",a[62]),p(Wn,"mouseenter",a[63]),p(Un,"mouseenter",a[64]),p(Kn,"mouseenter",a[65]),p(On,"mouseenter",a[66]),p(Jn,"mouseenter",a[67]),p(Zn,"mouseenter",a[68]),p(Xn,"mouseenter",a[69]),p(Yn,"mouseenter",a[70]),p(ts,"mouseenter",a[71]),p(ns,"mouseenter",a[72]),p(ss,"mouseenter",a[73]),p(rs,"mouseenter",a[74]),p(os,"mouseenter",a[75]),p(ls,"mouseenter",a[76])],Nr=!0)},p(_,K){const $s={};K[2]&32768&&($s.$$scope={dirty:K,ctx:_}),X.$set($s);const na={};K[2]&32768&&(na.$$scope={dirty:K,ctx:_}),Te.$set(na)},i(_){Vs||(ue(X.$$.fragment,_),ue(Te.$$.fragment,_),Vs=!0)},o(_){de(X.$$.fragment,_),de(Te.$$.fragment,_),Vs=!1},d(_){_&&t(n),_&&t(f),_&&t(u),_&&t(d),_&&t(b),_&&t(I),_&&t(N),ye(X),_&&t(We),_&&t(ze),_&&t(Ce),_&&t(ke),ye(Te),_&&t(Nt),_&&t(Ue),_&&t(ut),_&&t(Ne),_&&t(ft),_&&t(xt),_&&t(ba),_&&t(qe),_&&t(ta),_&&t($a),_&&t(Va),_&&t(lt),_&&t(tn),_&&t(va),_&&t(Da),_&&t(me),_&&t(Hn),_&&t(un),_&&t(Ln),_&&t(mn),_&&t(Mn),_&&t(It),_&&t(Ns),_&&t(Aa),_&&t(Es),_&&t(dn),_&&t(Ps),_&&t(Vn),_&&t(Ss),_&&t(Bn),_&&t(As),_&&t(xn),_&&t(qs),_&&t(jn),_&&t(Hs),_&&t(Oa),_&&t(Ls),_&&t(Gn),_&&t(Ms),_&&t(Dt),_&&t(Is),_&&t(es),_&&t(zs),_&&t(as),_&&t(Fs),_&&t(Yt),Nr=!1,Xa(Ar)}}}function Q(a){console.log(a)}function Ri(a){return[()=>Q(["n"]),()=>Q([]),()=>Q([]),()=>Q(["t","s","m","n"]),()=>Q(["N","n"]),()=>Q([]),()=>Q(["N"]),()=>Q(["n"]),()=>Q([]),()=>Q([]),()=>Q([]),()=>Q(["x"]),()=>Q(["x"]),()=>Q(["k"]),()=>Q(["x","k"]),()=>Q(["\\alpha","k"]),()=>Q(["\\beta","x","k"]),()=>Q(["k","n"]),()=>Q(["\\beta","\\alpha","k"]),()=>Q(["\\beta","\\alpha","k"]),()=>Q(["k","n"]),()=>Q(["x","k"]),()=>Q([]),()=>Q([]),()=>Q(["n"]),()=>Q(["n"]),()=>Q([]),()=>Q(["N"]),()=>Q([]),()=>Q(["n"]),()=>Q(["r","s","n","t","N","m"]),()=>Q(["\\psi"]),()=>Q(["r","\\psi","s","n","t","x","m"]),()=>Q([]),()=>Q(["N","x","\\psi","n"]),()=>Q(["y"]),()=>Q(["n"]),()=>Q(["y","k"]),()=>Q(["k"]),()=>Q(["y"]),()=>Q(["y","k"]),()=>Q(["k"]),()=>Q([]),()=>Q(["y","k"]),()=>Q([]),()=>Q(["k","n"]),()=>Q(["y"]),()=>Q(["y","k","n"]),()=>Q(["n"]),()=>Q(["k"]),()=>Q(["y","N","k","n"]),()=>Q(["r","t","\\psi","x","s","n","y","N","m"]),()=>Q(["k"]),()=>Q(["y","x","k"]),()=>Q(["x","k"]),()=>Q(["y","k"]),()=>Q(["x","k"]),()=>Q(["y","k"]),()=>Q(["n"]),()=>Q(["\\psi","x","n","y","N"]),()=>Q(["\\psi","x","n","y","N","k"]),()=>Q(["\\psi","x","n","y","N","k"]),()=>Q(["x"]),()=>Q(["k"]),()=>Q(["\\psi","x","n","y","N","k"]),()=>Q(["y","k","n"]),()=>Q(["y","N"]),()=>Q(["y","k"]),()=>Q(["y"]),()=>Q(["y"]),()=>Q(["y","n"]),()=>Q(["y","N","x","\\psi"]),()=>Q(["x"]),()=>Q(["y","N","x"]),()=>Q(["y"]),()=>Q(["x"]),()=>Q(["x"])]}class Wi extends sa{constructor(n){super(),ra(this,n,Ri,Di,oa,{},null,[-1,-1,-1])}}function Gi(a){let n,h,f,u;return n=new Qi({}),f=new Wi({}),{c(){ve(n.$$.fragment),h=H(),ve(f.$$.fragment)},l(y){we(n.$$.fragment,y),h=L(y),we(f.$$.fragment,y)},m(y,d){ge(n,y,d),c(y,h,d),ge(f,y,d),u=!0},p:Za,i(y){u||(ue(n.$$.fragment,y),ue(f.$$.fragment,y),u=!0)},o(y){de(n.$$.fragment,y),de(f.$$.fragment,y),u=!1},d(y){ye(n,y),y&&t(h),ye(f,y)}}}class Ui extends sa{constructor(n){super(),ra(this,n,null,Gi,oa,{})}}const Ki='<a href="https://en.wikipedia.org/wiki/Projection_(linear_algebra)"><h3>Projection (linear algebra)</h3></a><p>In linear algebra and functional analysis, a <b>projection</b> is a linear transformation <span class="mwe-math-element"><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/b4dc73bf40314945ff376bd363916a738548d40a" class="mwe-math-fallback-image-inline" aria-hidden="true" style="vertical-align:-0.338ex;width:1.745ex;height:2.176ex" /></span> from a vector space to itself such that <span class="mwe-math-element"><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/5369d895625034bc50c9f28975e3293ef6f2105b" class="mwe-math-fallback-image-inline" aria-hidden="true" style="vertical-align:-0.338ex;width:10.529ex;height:2.176ex" /></span>. That is, whenever <span class="mwe-math-element"><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/b4dc73bf40314945ff376bd363916a738548d40a" class="mwe-math-fallback-image-inline" aria-hidden="true" style="vertical-align:-0.338ex;width:1.745ex;height:2.176ex" /></span> is applied twice to any vector, it gives the same result as if it were applied once. It leaves its image unchanged. This definition of "projection" formalizes and generalizes the idea of graphical projection. One can also consider the effect of a projection on a geometrical object by examining the effect of the projection on points in the object.</p>',Oi='<a href="https://en.wikipedia.org/wiki/Bloch_sphere"><h3>Bloch sphere</h3></a><p>In quantum mechanics and computing, the <b>Bloch sphere</b> is a geometrical representation of the pure state space of a two-level quantum mechanical system (qubit), named after the physicist Felix Bloch.</p>',Ji='<a href="https://en.wikipedia.org/wiki/Degrees_of_freedom"><h3>Degrees of freedom</h3></a><p><b>Degrees of freedom</b> refers to the number of independent variables or parameters of a system. In various scientific fields, the word "freedom" is used to describe the limits to which physical movement or other physical processes are possible. This relates to the philosophical concept to the extent that people may be considered to have as much freedom as they are physically able to exercise.</p>',Zi='<a href="https://en.wikipedia.org/wiki/Phase_factor"><h3>Phase factor</h3></a><p>For any complex number written in polar form, the <b>phase factor</b> is the complex exponential factor. As such, the term "phase factor" is related to the more general term phasor, which may have any magnitude. The phase factor is a unit complex number, i.e. a complex number of absolute value 1. It is commonly used in quantum mechanics.</p>';function Xi(a){let n;return{c(){n=s("projection")},l(h){n=r(h,"projection")},m(h,f){c(h,n,f)},d(h){h&&t(n)}}}function Yi(a){let n;return{c(){n=s("Bloch sphere")},l(h){n=r(h,"Bloch sphere")},m(h,f){c(h,n,f)},d(h){h&&t(n)}}}function eh(a){let n;return{c(){n=s("degrees of freedom")},l(h){n=r(h,"degrees of freedom")},m(h,f){c(h,n,f)},d(h){h&&t(n)}}}function th(a){let n;return{c(){n=s("phase")},l(h){n=r(h,"phase")},m(h,f){c(h,n,f)},d(h){h&&t(n)}}}function ah(a){let n,h,f,u,y,d,b=m("\\alpha")+"",g,w,B=m("\\beta")+"",k,M,C=m("\\alpha = \\Vert{\\alpha}\\Vert \\cdot e^{i \\phi_{\\alpha}}")+"",P,x,re=m("\\beta = \\Vert{\\beta}\\Vert \\cdot e^{i \\phi_{\\beta}}")+"",S,z,j=m("\\Vert{\\alpha}\\Vert \\cdot e^{i \\phi_{\\alpha}} |0\\rangle + \\Vert{\\beta}\\Vert \\cdot e^{i \\phi_{\\beta}} |1\\rangle")+"",E,ee,A,D,I,N=m("e^{i \\phi_{\\alpha}}")+"",W,X,Z=m("\\Vert{e^{i \\phi_{\\alpha}}}\\Vert^2")+"",$,V,F=m("1")+"",O,se,Se=m("\\phi_{\\alpha}")+"",Ee,Fe,te=m("\\phi_{\\beta}")+"",v,T,G=m("e^{i \\phi_{\\alpha}}")+"",U,pe,He=m("\\Vert{\\alpha}\\Vert \\cdot |0\\rangle + \\Vert{\\beta}\\Vert \\cdot \\frac{e^{i \\phi_{\\beta}}}{e^{i \\phi_{\\alpha}}} |1\\rangle")+"",Ve,Be,nt=m("\\frac{e^{i \\phi_{\\beta}}}{e^{i \\phi_{\\alpha}}} = e^{i (\\phi_{\\beta} - \\phi_{\\alpha})}")+"",We,ze,st=m("\\phi = \\phi_{\\beta} - \\phi_{\\alpha}")+"",Ce,ke,gt=m("\\Vert{\\alpha}\\Vert \\cdot |0\\rangle + \\Vert{\\beta}\\Vert \\cdot e^{i \\phi} |1\\rangle")+"",Te,De,oe,Re,_t,be=m("\\Vert{\\alpha}\\Vert^2 + \\Vert{\\beta}\\Vert^2 = 1")+"",ht,fe,J=m("\\theta")+"",ce,R,dt=m("\\cos{(\\frac{\\theta}{2})} \\cdot |0 \\rangle + \\sin{(\\frac{\\theta}{2})} \\cdot e^{i \\phi} |1 \\rangle")+"",rt,Ge,bt=m("\\theta")+"",ot,Ze,qt=m("\\phi")+"",ae,Me,ne=m("\\theta")+"",Tt,vt,Nt=m("z")+"",Ue,Et,Jt=m("\\phi")+"",Bt,yt,Ct,Pt,ca=m("x-y")+"",$t,Xe,Ht,wt,Je,tt,ut,Ne,St,mt=m("\\theta")+"",_a,kt,Ft=m("\\phi")+"",da,pt,Zt,la,Wt,Ie;return yt=new at({props:{hovertext:Ki,$$slots:{default:[Xi]},$$scope:{ctx:a}}}),Xe=new at({props:{hovertext:Oi,$$slots:{default:[Yi]},$$scope:{ctx:a}}}),ut=new at({props:{hovertext:Ji,$$slots:{default:[eh]},$$scope:{ctx:a}}}),pt=new at({props:{hovertext:Zi,$$slots:{default:[th]},$$scope:{ctx:a}}}),{c(){n=o("h2"),h=s("The Bloch-sphere"),f=H(),u=o("p"),y=s("As the coefficients "),d=o("span"),g=s(" and "),w=o("span"),k=s(" are complex numbers, they can be expressed in the form "),M=o("span"),P=s(" and "),x=o("span"),S=s(". Thus, the state of the qubit can be rewritten as "),z=o("span"),E=s("."),ee=H(),A=o("p"),D=s("Remember that "),I=o("span"),W=s(" is a unit vector rotated around the origin, and therefore the square of its norm "),X=o("span"),$=s(" also equals to "),V=o("span"),O=s(". This means that we can modify the angles "),se=o("span"),Ee=s(" and "),Fe=o("span"),v=s(" freely without affecting the measurement probabilities. Therefore, we can do an algebraic trick to simplify the expression above. Namely, let's divide the state by "),T=o("span"),U=s(" to obtain "),pe=o("span"),Ve=s(". By the rules of exponentiation, "),Be=o("span"),We=s(". Next, let's introduce a new variable "),ze=o("span"),Ce=s(", with the help of which the state can be further simplified to "),ke=o("span"),Te=s("."),De=H(),oe=o("p"),Re=s("We know that "),_t=o("span"),ht=s(". Consequently, these two numbers can also be represented geometrically as vector of unit length rotated around the origin by some angle, the double of which we'll denote as "),fe=o("span"),ce=s(". Using trigonometry, we can now rewrite the state as "),R=o("span"),rt=s(". Notice that we now only need two variables to express the state of the qubit: the angles "),Ge=o("span"),ot=s(" and "),Ze=o("span"),ae=s(". Geometrically, this can be represented as a vector pointing to the surface of 3-dimensional sphere with unit radius, where "),Me=o("span"),Tt=s(" is the angle of the vector and the "),vt=o("span"),Ue=s(" axis, and "),Et=o("span"),Bt=s(" is the angle of the vertical "),ve(yt.$$.fragment),Ct=s(" of the vector on the "),Pt=o("span"),$t=s(" plane. This representation of qubit states is called the "),ve(Xe.$$.fragment),Ht=s("."),wt=H(),Je=o("p"),tt=s("It's important to note that of the two "),ve(ut.$$.fragment),Ne=s(" on the Bloch sphere, only the angle "),St=o("span"),_a=s(" is related to measurement probabilities. "),kt=o("span"),da=s(" is an inherently quantum property called the "),ve(pt.$$.fragment),Zt=s(" that does not have physical manifestation directly observable to us. Because of this, it's hard to find any intuitive analogy from everyday life that could help us understand what exactly the phase is. The most useful approach in this context is to look at the phase as a matematical property of quantum objects that we can leverage to design clever algorithms.")},l(Y){n=l(Y,"H2",{});var Qe=i(n);h=r(Qe,"The Bloch-sphere"),Qe.forEach(t),f=L(Y),u=l(Y,"P",{});var Oe=i(u);y=r(Oe,"As the coefficients "),d=l(Oe,"SPAN",{});var ya=i(d);ya.forEach(t),g=r(Oe," and "),w=l(Oe,"SPAN",{});var Vt=i(w);Vt.forEach(t),k=r(Oe," are complex numbers, they can be expressed in the form "),M=l(Oe,"SPAN",{});var Lt=i(M);Lt.forEach(t),P=r(Oe," and "),x=l(Oe,"SPAN",{});var Ya=i(x);Ya.forEach(t),S=r(Oe,". Thus, the state of the qubit can be rewritten as "),z=l(Oe,"SPAN",{});var Xt=i(z);Xt.forEach(t),E=r(Oe,"."),Oe.forEach(t),ee=L(Y),A=l(Y,"P",{});var Ae=i(A);D=r(Ae,"Remember that "),I=l(Ae,"SPAN",{});var Ma=i(I);Ma.forEach(t),W=r(Ae," is a unit vector rotated around the origin, and therefore the square of its norm "),X=l(Ae,"SPAN",{});var Gt=i(X);Gt.forEach(t),$=r(Ae," also equals to "),V=l(Ae,"SPAN",{});var ie=i(V);ie.forEach(t),O=r(Ae,". This means that we can modify the angles "),se=l(Ae,"SPAN",{});var Ia=i(se);Ia.forEach(t),Ee=r(Ae," and "),Fe=l(Ae,"SPAN",{});var Ut=i(Fe);Ut.forEach(t),v=r(Ae," freely without affecting the measurement probabilities. Therefore, we can do an algebraic trick to simplify the expression above. Namely, let's divide the state by "),T=l(Ae,"SPAN",{});var ia=i(T);ia.forEach(t),U=r(Ae," to obtain "),pe=l(Ae,"SPAN",{});var xa=i(pe);xa.forEach(t),Ve=r(Ae,". By the rules of exponentiation, "),Be=l(Ae,"SPAN",{});var le=i(Be);le.forEach(t),We=r(Ae,". Next, let's introduce a new variable "),ze=l(Ae,"SPAN",{});var ft=i(ze);ft.forEach(t),Ce=r(Ae,", with the help of which the state can be further simplified to "),ke=l(Ae,"SPAN",{});var xt=i(ke);xt.forEach(t),Te=r(Ae,"."),Ae.forEach(t),De=L(Y),oe=l(Y,"P",{});var he=i(oe);Re=r(he,"We know that "),_t=l(he,"SPAN",{});var ba=i(_t);ba.forEach(t),ht=r(he,". Consequently, these two numbers can also be represented geometrically as vector of unit length rotated around the origin by some angle, the double of which we'll denote as "),fe=l(he,"SPAN",{});var qe=i(fe);qe.forEach(t),ce=r(he,". Using trigonometry, we can now rewrite the state as "),R=l(he,"SPAN",{});var za=i(R);za.forEach(t),rt=r(he,". Notice that we now only need two variables to express the state of the qubit: the angles "),Ge=l(he,"SPAN",{});var Kt=i(Ge);Kt.forEach(t),ot=r(he," and "),Ze=l(he,"SPAN",{});var gn=i(Ze);gn.forEach(t),ae=r(he,". Geometrically, this can be represented as a vector pointing to the surface of 3-dimensional sphere with unit radius, where "),Me=l(he,"SPAN",{});var Fa=i(Me);Fa.forEach(t),Tt=r(he," is the angle of the vector and the "),vt=l(he,"SPAN",{});var ta=i(vt);ta.forEach(t),Ue=r(he," axis, and "),Et=l(he,"SPAN",{});var $a=i(Et);$a.forEach(t),Bt=r(he," is the angle of the vertical "),we(yt.$$.fragment,he),Ct=r(he," of the vector on the "),Pt=l(he,"SPAN",{});var ha=i(Pt);ha.forEach(t),$t=r(he," plane. This representation of qubit states is called the "),we(Xe.$$.fragment,he),Ht=r(he,"."),he.forEach(t),wt=L(Y),Je=l(Y,"P",{});var At=i(Je);tt=r(At,"It's important to note that of the two "),we(ut.$$.fragment,At),Ne=r(At," on the Bloch sphere, only the angle "),St=l(At,"SPAN",{});var Va=i(St);Va.forEach(t),_a=r(At," is related to measurement probabilities. "),kt=l(At,"SPAN",{});var lt=i(kt);lt.forEach(t),da=r(At," is an inherently quantum property called the "),we(pt.$$.fragment,At),Zt=r(At," that does not have physical manifestation directly observable to us. Because of this, it's hard to find any intuitive analogy from everyday life that could help us understand what exactly the phase is. The most useful approach in this context is to look at the phase as a matematical property of quantum objects that we can leverage to design clever algorithms."),At.forEach(t)},m(Y,Qe){c(Y,n,Qe),e(n,h),c(Y,f,Qe),c(Y,u,Qe),e(u,y),e(u,d),d.innerHTML=b,e(u,g),e(u,w),w.innerHTML=B,e(u,k),e(u,M),M.innerHTML=C,e(u,P),e(u,x),x.innerHTML=re,e(u,S),e(u,z),z.innerHTML=j,e(u,E),c(Y,ee,Qe),c(Y,A,Qe),e(A,D),e(A,I),I.innerHTML=N,e(A,W),e(A,X),X.innerHTML=Z,e(A,$),e(A,V),V.innerHTML=F,e(A,O),e(A,se),se.innerHTML=Se,e(A,Ee),e(A,Fe),Fe.innerHTML=te,e(A,v),e(A,T),T.innerHTML=G,e(A,U),e(A,pe),pe.innerHTML=He,e(A,Ve),e(A,Be),Be.innerHTML=nt,e(A,We),e(A,ze),ze.innerHTML=st,e(A,Ce),e(A,ke),ke.innerHTML=gt,e(A,Te),c(Y,De,Qe),c(Y,oe,Qe),e(oe,Re),e(oe,_t),_t.innerHTML=be,e(oe,ht),e(oe,fe),fe.innerHTML=J,e(oe,ce),e(oe,R),R.innerHTML=dt,e(oe,rt),e(oe,Ge),Ge.innerHTML=bt,e(oe,ot),e(oe,Ze),Ze.innerHTML=qt,e(oe,ae),e(oe,Me),Me.innerHTML=ne,e(oe,Tt),e(oe,vt),vt.innerHTML=Nt,e(oe,Ue),e(oe,Et),Et.innerHTML=Jt,e(oe,Bt),ge(yt,oe,null),e(oe,Ct),e(oe,Pt),Pt.innerHTML=ca,e(oe,$t),ge(Xe,oe,null),e(oe,Ht),c(Y,wt,Qe),c(Y,Je,Qe),e(Je,tt),ge(ut,Je,null),e(Je,Ne),e(Je,St),St.innerHTML=mt,e(Je,_a),e(Je,kt),kt.innerHTML=Ft,e(Je,da),ge(pt,Je,null),e(Je,Zt),la=!0,Wt||(Ie=[p(d,"mouseenter",a[0]),p(w,"mouseenter",a[1]),p(M,"mouseenter",a[2]),p(x,"mouseenter",a[3]),p(z,"mouseenter",a[4]),p(I,"mouseenter",a[5]),p(X,"mouseenter",a[6]),p(V,"mouseenter",a[7]),p(se,"mouseenter",a[8]),p(Fe,"mouseenter",a[9]),p(T,"mouseenter",a[10]),p(pe,"mouseenter",a[11]),p(Be,"mouseenter",a[12]),p(ze,"mouseenter",a[13]),p(ke,"mouseenter",a[14]),p(_t,"mouseenter",a[15]),p(fe,"mouseenter",a[16]),p(R,"mouseenter",a[17]),p(Ge,"mouseenter",a[18]),p(Ze,"mouseenter",a[19]),p(Me,"mouseenter",a[20]),p(vt,"mouseenter",a[21]),p(Et,"mouseenter",a[22]),p(Pt,"mouseenter",a[23]),p(St,"mouseenter",a[24]),p(kt,"mouseenter",a[25])],Wt=!0)},p(Y,[Qe]){const Oe={};Qe&67108864&&(Oe.$$scope={dirty:Qe,ctx:Y}),yt.$set(Oe);const ya={};Qe&67108864&&(ya.$$scope={dirty:Qe,ctx:Y}),Xe.$set(ya);const Vt={};Qe&67108864&&(Vt.$$scope={dirty:Qe,ctx:Y}),ut.$set(Vt);const Lt={};Qe&67108864&&(Lt.$$scope={dirty:Qe,ctx:Y}),pt.$set(Lt)},i(Y){la||(ue(yt.$$.fragment,Y),ue(Xe.$$.fragment,Y),ue(ut.$$.fragment,Y),ue(pt.$$.fragment,Y),la=!0)},o(Y){de(yt.$$.fragment,Y),de(Xe.$$.fragment,Y),de(ut.$$.fragment,Y),de(pt.$$.fragment,Y),la=!1},d(Y){Y&&t(n),Y&&t(f),Y&&t(u),Y&&t(ee),Y&&t(A),Y&&t(De),Y&&t(oe),ye(yt),ye(Xe),Y&&t(wt),Y&&t(Je),ye(ut),ye(pt),Wt=!1,Xa(Ie)}}}function ct(a){console.log(a)}function nh(a){return[()=>ct(["\\alpha"]),()=>ct(["\\beta"]),()=>ct(["\\alpha","\\phi"]),()=>ct(["\\beta","\\phi"]),()=>ct(["\\beta","\\alpha","\\phi"]),()=>ct(["\\alpha","\\phi"]),()=>ct(["\\alpha","\\phi"]),()=>ct([]),()=>ct(["\\alpha","\\phi"]),()=>ct(["\\beta","\\phi"]),()=>ct(["\\alpha","\\phi"]),()=>ct(["\\beta","\\alpha","\\phi"]),()=>ct(["\\beta","\\alpha","\\phi"]),()=>ct(["\\beta","\\alpha","\\phi"]),()=>ct(["\\beta","\\alpha","\\phi"]),()=>ct(["\\beta","\\alpha"]),()=>ct(["\\theta"]),()=>ct(["\\theta","\\phi"]),()=>ct(["\\theta"]),()=>ct(["\\phi"]),()=>ct(["\\theta"]),()=>ct(["z"]),()=>ct(["\\phi"]),()=>ct(["y","x"]),()=>ct(["\\theta"]),()=>ct(["\\phi"])]}class sh extends sa{constructor(n){super(),ra(this,n,nh,ah,oa,{})}}const rh='<a href="https://en.wikipedia.org/wiki/Complex_number"><h3 class="text-lg font-semibold">Complex number</h3></a><p>In mathematics, a <b>complex number</b> is an element of a number system that extends the real numbers with a specific element denoted <span class="texhtml mvar" style="font-style:italic">i</span>, called the imaginary unit and satisfying the equation <span class="texhtml "><i>i</i><sup>2</sup> = \u22121</span>; every complex number can be expressed in the form <span class="texhtml "><i>a</i> + <i>bi</i></span>, where <span class="texhtml mvar" style="font-style:italic">a</span> and <span class="texhtml mvar" style="font-style:italic">b</span> are real numbers. Because no real number satisfies the above equation, <span class="texhtml mvar" style="font-style:italic">i</span> was called an imaginary number by Ren\xE9 Descartes. For the complex number <span class="texhtml "><i>a</i> + <i>bi</i></span>, <span class="texhtml mvar" style="font-style:italic">a</span> is called the <b><span class="vanchor"><span class="vanchor-text">real part</span></span></b> and <span class="texhtml mvar" style="font-style:italic">b</span> is called the <b><span class="vanchor"><span class="vanchor-text">imaginary part</span></span></b>. The set of complex numbers is denoted by either of the symbols <span class="mwe-math-element"><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/f9add4085095b9b6d28d045fd9c92c2c09f549a7" class="mwe-math-fallback-image-inline" aria-hidden="true" style="vertical-align:-0.338ex;width:1.678ex;height:2.176ex" /></span> or <span class="texhtml "><b>C</b></span>. Despite the historical nomenclature "imaginary", complex numbers are regarded in the mathematical sciences as just as "real" as the real numbers and are fundamental in many aspects of the scientific description of the natural world.</p>',oh='<a href="https://en.wikipedia.org/wiki/Imaginary_number"><h3>Imaginary number</h3></a><p>An <b>imaginary number</b> is a real number multiplied by the imaginary unit <span class="texhtml mvar" style="font-style:italic">i</span>, which is defined by its property <span class="texhtml "><i>i</i><sup>2</sup> = \u22121</span>. The square of an imaginary number <span class="texhtml mvar" style="font-style:italic">bi</span> is <span class="texhtml ">\u2212<i>b</i><sup>2</sup></span>. For example, <span class="texhtml ">5<i>i</i></span> is an imaginary number, and its square is <span class="texhtml ">\u221225</span>. By definition, zero is considered to be both real and imaginary.</p>',lh='<a href="https://en.wikipedia.org/wiki/Real_number"><h3>Real number</h3></a><p>In mathematics, a <b>real number</b> is a value of a continuous quantity that can represent a distance along a line. The adjective <i>real</i> in this context was introduced in the 17th century by Ren\xE9 Descartes, who distinguished between real and imaginary roots of polynomials. The real numbers include all the rational numbers, such as the integer \u22125 and the fraction 4/3, and all the irrational numbers, such as <span class="mwe-math-element"><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/b4afc1e27d418021bf10898eb44a7f5f315735ff" class="mwe-math-fallback-image-inline" aria-hidden="true" style="vertical-align:-0.671ex;width:3.098ex;height:3.009ex" /></span>. Included within the irrationals are the real transcendental numbers, such as <span><span class="texhtml mvar" style="font-style:italic">\u03C0</span></span> (3.14159265...). In addition to measuring distance, real numbers can be used to measure quantities such as time, mass, energy, velocity, and many more. The set of real numbers is denoted using the symbol <b>R</b> or <span class="mwe-math-element"><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/786849c765da7a84dbc3cce43e96aad58a5868dc" class="mwe-math-fallback-image-inline" aria-hidden="true" style="vertical-align:-0.338ex;width:1.678ex;height:2.176ex" /></span> and is sometimes called "the reals".</p>',ih='<a href="https://en.wikipedia.org/wiki/Complex_plane"><h3>Complex plane</h3></a><p>In mathematics, the <b>complex plane</b> is the plane formed by the complex numbers, with a Cartesian coordinate system such that the <span class="texhtml mvar" style="font-style:italic">x</span>-axis, called <b>real axis</b>, is formed by the real numbers, and the <span class="texhtml mvar" style="font-style:italic">y</span>-axis, called <b>imaginary axis</b>, is formed by the imaginary numbers.</p>',hh='<a href="https://en.wikipedia.org/wiki/Bit"><h3 class="text-lg font-semibold">Bit</h3></a><p>The <b>bit</b> is the most basic unit of information in computing and digital communications. The name is a portmanteau of <b>binary digit</b>. The bit represents a logical state with one of two possible values. These values are most commonly represented as either <span class="nowrap">"<span class="monospaced">1</span>" or "<span class="monospaced">0</span>"</span>, but other representations such as <i>true</i>/<i>false</i>, <i>yes</i>/<i>no</i>, <i>on</i>/<i>off</i>, or <i>+</i>/<i>\u2212</i> are also commonly used.</p>',uh='<a href="https://en.wikipedia.org/wiki/Information_theory"><h3>Information theory</h3></a><p><b>Information theory</b> is the scientific study of the quantification, storage, and communication of digital information. The field was fundamentally established by the works of Harry Nyquist and Ralph Hartley, in the 1920s, and Claude Shannon in the 1940s. The field is at the intersection of probability theory, statistics, computer science, statistical mechanics, information engineering, and electrical engineering.</p>',mh='<a href="https://en.wikipedia.org/wiki/Qubit"><h3 class="text-lg font-semibold">Qubit</h3></a><p>In quantum computing, a <b>qubit</b> or <b>quantum bit</b> is a basic unit of quantum information\u2014the quantum version of the classic binary bit physically realized with a two-state device. A qubit is a two-state quantum-mechanical system, one of the simplest quantum systems displaying the peculiarity of quantum mechanics. Examples include the spin of the electron in which the two levels can be taken as spin up and spin down; or the polarization of a single photon in which the two states can be taken to be the vertical polarization and the horizontal polarization. In a classical system, a bit would have to be in one state or the other. However, quantum mechanics allows the qubit to be in a coherent superposition of both states simultaneously, a property that is fundamental to quantum mechanics and quantum computing.</p>',ph='<a href="https://en.wikipedia.org/wiki/Measurement_in_quantum_mechanics"><h3>Measurement in quantum mechanics</h3></a><p>In quantum physics, a <b>measurement</b> is the testing or manipulation of a physical system to yield a numerical result. The predictions that quantum physics makes are in general probabilistic. The mathematical tools for making predictions about what measurement outcomes may occur were developed during the 20th century and make use of linear algebra and functional analysis.</p>',fh=`<a href="https://en.wikipedia.org/wiki/Quantum_state"><h3>Quantum state</h3></a><p>In quantum physics, a <b>quantum state</b> is a mathematical entity that provides a probability distribution for the outcomes of each possible measurement on a system. Knowledge of the quantum state together with the rules for the system's evolution in time exhausts all that can be predicted about the system's behavior. A mixture of quantum states is again a quantum state. Quantum states that cannot be written as a mixture of other states are called <b>pure quantum states</b>, while all other states are called <b>mixed quantum states</b>. A pure quantum state can be represented by a ray in a Hilbert space over the complex numbers, while mixed states are represented by density matrices, which are positive semidefinite operators that act on Hilbert spaces.</p>`,ch=`<a href="https://en.wikipedia.org/wiki/Linear_combination"><h3>Linear combination</h3></a><p>In mathematics, a <b>linear combination</b> is an expression constructed from a set of terms by multiplying each term by a constant and adding the results. The concept of linear combinations is central to linear algebra and related fields of mathematics.
Most of this article deals with linear combinations in the context of a vector space over a field, with some generalizations given at the end of the article.</p>`;function _h(a){let n;return{c(){n=s("complex number")},l(h){n=r(h,"complex number")},m(h,f){c(h,n,f)},d(h){h&&t(n)}}}function dh(a){let n;return{c(){n=s("imaginary")},l(h){n=r(h,"imaginary")},m(h,f){c(h,n,f)},d(h){h&&t(n)}}}function bh(a){let n;return{c(){n=s("real")},l(h){n=r(h,"real")},m(h,f){c(h,n,f)},d(h){h&&t(n)}}}function vh(a){let n;return{c(){n=s("complex plane")},l(h){n=r(h,"complex plane")},m(h,f){c(h,n,f)},d(h){h&&t(n)}}}function wh(a){let n;return{c(){n=s("bits")},l(h){n=r(h,"bits")},m(h,f){c(h,n,f)},d(h){h&&t(n)}}}function gh(a){let n;return{c(){n=s("bit of information")},l(h){n=r(h,"bit of information")},m(h,f){c(h,n,f)},d(h){h&&t(n)}}}function yh(a){let n;return{c(){n=s("Qubits")},l(h){n=r(h,"Qubits")},m(h,f){c(h,n,f)},d(h){h&&t(n)}}}function $h(a){let n;return{c(){n=s("measured")},l(h){n=r(h,"measured")},m(h,f){c(h,n,f)},d(h){h&&t(n)}}}function kh(a){let n;return{c(){n=s("state")},l(h){n=r(h,"state")},m(h,f){c(h,n,f)},d(h){h&&t(n)}}}function Th(a){let n;return{c(){n=s("linear combination")},l(h){n=r(h,"linear combination")},m(h,f){c(h,n,f)},d(h){h&&t(n)}}}function Nh(a){let n,h,f,u,y,d,b,g,w=m("z \\in \\mathbb{C}")+"",B,k,M=m("z = a i + b")+"",C,P,x=m("a, b \\in \\mathbb{R}")+"",re,S,z=m("i = \\sqrt{-1}")+"",j,E,ee=m("a")+"",A,D,I,N,W=m("b")+"",X,Z,$,V,F=m("z")+"",O,se,Se=m("a=0")+"",Ee,Fe,te,v,T,G,U,pe=m("x")+"",He,Ve,Be=m("y")+"",nt,We,ze,st,Ce,ke=m("\\Vert{z}\\Vert = \\sqrt{a^2 + b^2}")+"",gt,Te,De=m("z")+"",oe,Re,_t=m("\\Vert{z}\\Vert^2 = a^2 + b^2")+"",be,ht,fe,J,ce,R=m("z")+"",dt,rt,Ge=m("\\Vert{z}\\Vert \\cdot e^{i \\phi_z}")+"",bt,ot,Ze=m("\\phi_z \\in [0, 2\\pi]")+"",qt,ae,Me=m("e^{i \\phi_z}")+"",ne,Tt,vt=m("\\phi_z")+"",Nt,Ue,Et=m("2\\pi")+"",Jt,Bt,yt=m("z")+"",Ct,Pt,ca=m("\\Vert{z}\\Vert")+"",$t,Xe,Ht,wt,Je,tt,ut,Ne,St,mt,_a,kt,Ft=m("0")+"",da,pt,Zt=m("1")+"",la,Wt,Ie,Y,Qe,Oe,ya=m("0")+"",Vt,Lt,Ya=m("1")+"",Xt,Ae,Ma,Gt,ie,Ia,Ut,ia=m("|0\\rangle")+"",xa,le,ft=m("|1\\rangle")+"",xt,he,ba,qe,za,Kt,gn=m("\\alpha |0\\rangle + \\beta |1\\rangle")+"",Fa,ta,$a=m("\\alpha")+"",ha,At,Va=m("\\beta")+"",lt,ka,ja=m("|0\\rangle")+"",yn,Ta,tn=m("\\Vert{\\alpha}\\Vert^2")+"",va,Ke,hs=m("|1\\rangle")+"",Da,me,$n=m("\\Vert{\\beta}\\Vert^2")+"",Na,Ra,kn=m("|0\\rangle")+"",Ea,Qa,ua=m("|1\\rangle")+"",Pa,Wa,Ga=m("\\Vert{\\alpha}\\Vert^2 + \\Vert{\\beta}\\Vert^2 = 1")+"",wa,Qt,Tn=m("\\Vert{\\alpha}\\Vert^2")+"",Sa,Ua,Nn=m("\\Vert{\\beta}\\Vert^2")+"",Ka,Pn,En,en;return d=new at({props:{hovertext:rh,$$slots:{default:[_h]},$$scope:{ctx:a}}}),D=new at({props:{hovertext:oh,$$slots:{default:[dh]},$$scope:{ctx:a}}}),Z=new at({props:{hovertext:lh,$$slots:{default:[bh]},$$scope:{ctx:a}}}),T=new at({props:{hovertext:ih,$$slots:{default:[vh]},$$scope:{ctx:a}}}),Ne=new at({props:{hovertext:hh,$$slots:{default:[wh]},$$scope:{ctx:a}}}),mt=new at({props:{hovertext:uh,$$slots:{default:[gh]},$$scope:{ctx:a}}}),Y=new at({props:{hovertext:mh,$$slots:{default:[yh]},$$scope:{ctx:a}}}),Ae=new at({props:{hovertext:ph,$$slots:{default:[$h]},$$scope:{ctx:a}}}),he=new at({props:{hovertext:fh,$$slots:{default:[kh]},$$scope:{ctx:a}}}),qe=new at({props:{hovertext:ch,$$slots:{default:[Th]},$$scope:{ctx:a}}}),{c(){n=o("h2"),h=s("Important properties of complex numbers"),f=H(),u=o("p"),y=s("The general form of a "),ve(d.$$.fragment),b=H(),g=o("span"),B=s(" is the following: "),k=o("span"),C=s(", where "),P=o("span"),re=s(" and "),S=o("span"),j=s(". "),E=o("span"),A=s(" is called the "),ve(D.$$.fragment),I=s(" and "),N=o("span"),X=s(" the "),ve(Z.$$.fragment),$=s(" component of "),V=o("span"),O=s(". In fact, all real numbers are complex numbers, the imaginary component of which is zero ("),se=o("span"),Ee=s(")."),Fe=H(),te=o("p"),v=s("Complex numbers can be represented geometrically as two-dimensional vectors in the so called "),ve(T.$$.fragment),G=s(", where the "),U=o("span"),He=s("-axis stands for the real, and the "),Ve=o("span"),nt=s("-axis for the imaginary component."),We=H(),ze=o("p"),st=s("Let "),Ce=o("span"),gt=s(" denote the Euclidean norm of the vector associated with the complex number "),Te=o("span"),oe=s(". Consequently, "),Re=o("span"),be=s(" is the square of this norm, and it's going to play an important role in what follows."),ht=H(),fe=o("p"),J=s("Another important thing to note is that each 2-dimensional vector is uniquely defined by two properties: its length and angle of rotation. Consequently, a complex number "),ce=o("span"),dt=s(" can be expressed as "),rt=o("span"),bt=s(", where "),ot=o("span"),qt=s(". Here, "),ae=o("span"),ne=s(" is a vector of unit length in the complex plane, rotated around the origin by an angle of "),Tt=o("span"),Nt=s(" ("),Ue=o("span"),Jt=s(" corresponds to a full rotation). All we have to do to get back "),Bt=o("span"),Ct=s(", then, is multiply this rotated unit vector by "),Pt=o("span"),$t=s(" to adjust its norm."),Xe=H(),Ht=o("h2"),wt=s("Qubit states"),Je=H(),tt=o("p"),ut=s("The elementary units of information in classical computing are "),ve(Ne.$$.fragment),St=s(". As their name suggests, bits represent one single "),ve(mt.$$.fragment),_a=s(", which means they can take on either of two values "),kt=o("span"),da=s(" and "),pt=o("span"),la=s(" at a time."),Wt=H(),Ie=o("p"),ve(Y.$$.fragment),Qe=s(" are the quantum computing equivalent of bits. They differ from classical bits - among other things - in that they can take on a multitude of values instead of just "),Oe=o("span"),Vt=s(" and "),Lt=o("span"),Xt=s(", until that value is "),ve(Ae.$$.fragment),Ma=s(", at which point they behave just like classical bits. To explain what this means exactly, we'll need to introduce some further concepts."),Gt=H(),ie=o("p"),Ia=s("Let "),Ut=o("span"),xa=s(" and "),le=o("span"),xt=s(" denote the so called basis states of a qubit that are the quantum-equivalent of classical bit states. If you look at a qubit directly to learn it's value, you'll see one of these basis states. But while you're not looking - due to it's quantum nature - the "),ve(he.$$.fragment),ba=s(" of a qubit may be something more intricate. Generally, it can be expressed as the "),ve(qe.$$.fragment),za=s(" of the two basis states: "),Kt=o("span"),Fa=s(". Here, "),ta=o("span"),ha=s(" and "),At=o("span"),lt=s(" are complex numbers that indicate the relative weight, with which the two basis states are present in this combination. More precisely, if we now look at the qubit, we'll see the basis state "),ka=o("span"),yn=s(" with a probability of "),Ta=o("span"),va=s(", and the basis state "),Ke=o("span"),Da=s(" with a probability of "),me=o("span"),Na=s(". Because these probabilities must add up to one - as "),Ra=o("span"),Ea=s(" and "),Qa=o("span"),Pa=s(" are the only possible outcomes - the equation "),Wa=o("span"),wa=s(" must hold for all possible qubit states. Let's call "),Qt=o("span"),Sa=s(" and "),Ua=o("span"),Ka=s(" the measurement probabilities of the basis states.")},l(q){n=l(q,"H2",{});var _e=i(n);h=r(_e,"Important properties of complex numbers"),_e.forEach(t),f=L(q),u=l(q,"P",{});var xe=i(u);y=r(xe,"The general form of a "),we(d.$$.fragment,xe),b=L(xe),g=l(xe,"SPAN",{});var Sn=i(g);Sn.forEach(t),B=r(xe," is the following: "),k=l(xe,"SPAN",{});var an=i(k);an.forEach(t),C=r(xe,", where "),P=l(xe,"SPAN",{});var Ba=i(P);Ba.forEach(t),re=r(xe," and "),S=l(xe,"SPAN",{});var An=i(S);An.forEach(t),j=r(xe,". "),E=l(xe,"SPAN",{});var nn=i(E);nn.forEach(t),A=r(xe," is called the "),we(D.$$.fragment,xe),I=r(xe," and "),N=l(xe,"SPAN",{});var Ca=i(N);Ca.forEach(t),X=r(xe," the "),we(Z.$$.fragment,xe),$=r(xe," component of "),V=l(xe,"SPAN",{});var qn=i(V);qn.forEach(t),O=r(xe,". In fact, all real numbers are complex numbers, the imaginary component of which is zero ("),se=l(xe,"SPAN",{});var sn=i(se);sn.forEach(t),Ee=r(xe,")."),xe.forEach(t),Fe=L(q),te=l(q,"P",{});var jt=i(te);v=r(jt,"Complex numbers can be represented geometrically as two-dimensional vectors in the so called "),we(T.$$.fragment,jt),G=r(jt,", where the "),U=l(jt,"SPAN",{});var xs=i(U);xs.forEach(t),He=r(jt,"-axis stands for the real, and the "),Ve=l(jt,"SPAN",{});var us=i(Ve);us.forEach(t),nt=r(jt,"-axis for the imaginary component."),jt.forEach(t),We=L(q),ze=l(q,"P",{});var aa=i(ze);st=r(aa,"Let "),Ce=l(aa,"SPAN",{});var js=i(Ce);js.forEach(t),gt=r(aa," denote the Euclidean norm of the vector associated with the complex number "),Te=l(aa,"SPAN",{});var ms=i(Te);ms.forEach(t),oe=r(aa,". Consequently, "),Re=l(aa,"SPAN",{});var rn=i(Re);rn.forEach(t),be=r(aa," is the square of this norm, and it's going to play an important role in what follows."),aa.forEach(t),ht=L(q),fe=l(q,"P",{});var Mt=i(fe);J=r(Mt,"Another important thing to note is that each 2-dimensional vector is uniquely defined by two properties: its length and angle of rotation. Consequently, a complex number "),ce=l(Mt,"SPAN",{});var ps=i(ce);ps.forEach(t),dt=r(Mt," can be expressed as "),rt=l(Mt,"SPAN",{});var on=i(rt);on.forEach(t),bt=r(Mt,", where "),ot=l(Mt,"SPAN",{});var Ds=i(ot);Ds.forEach(t),qt=r(Mt,". Here, "),ae=l(Mt,"SPAN",{});var fs=i(ae);fs.forEach(t),ne=r(Mt," is a vector of unit length in the complex plane, rotated around the origin by an angle of "),Tt=l(Mt,"SPAN",{});var ln=i(Tt);ln.forEach(t),Nt=r(Mt," ("),Ue=l(Mt,"SPAN",{});var Rs=i(Ue);Rs.forEach(t),Jt=r(Mt," corresponds to a full rotation). All we have to do to get back "),Bt=l(Mt,"SPAN",{});var cs=i(Bt);cs.forEach(t),Ct=r(Mt,", then, is multiply this rotated unit vector by "),Pt=l(Mt,"SPAN",{});var hn=i(Pt);hn.forEach(t),$t=r(Mt," to adjust its norm."),Mt.forEach(t),Xe=L(q),Ht=l(q,"H2",{});var Ts=i(Ht);wt=r(Ts,"Qubit states"),Ts.forEach(t),Je=L(q),tt=l(q,"P",{});var ma=i(tt);ut=r(ma,"The elementary units of information in classical computing are "),we(Ne.$$.fragment,ma),St=r(ma,". As their name suggests, bits represent one single "),we(mt.$$.fragment,ma),_a=r(ma,", which means they can take on either of two values "),kt=l(ma,"SPAN",{});var Hn=i(kt);Hn.forEach(t),da=r(ma," and "),pt=l(ma,"SPAN",{});var un=i(pt);un.forEach(t),la=r(ma," at a time."),ma.forEach(t),Wt=L(q),Ie=l(q,"P",{});var ga=i(Ie);we(Y.$$.fragment,ga),Qe=r(ga," are the quantum computing equivalent of bits. They differ from classical bits - among other things - in that they can take on a multitude of values instead of just "),Oe=l(ga,"SPAN",{});var Ln=i(Oe);Ln.forEach(t),Vt=r(ga," and "),Lt=l(ga,"SPAN",{});var mn=i(Lt);mn.forEach(t),Xt=r(ga,", until that value is "),we(Ae.$$.fragment,ga),Ma=r(ga,", at which point they behave just like classical bits. To explain what this means exactly, we'll need to introduce some further concepts."),ga.forEach(t),Gt=L(q),ie=l(q,"P",{});var Pe=i(ie);Ia=r(Pe,"Let "),Ut=l(Pe,"SPAN",{});var Ws=i(Ut);Ws.forEach(t),xa=r(Pe," and "),le=l(Pe,"SPAN",{});var Mn=i(le);Mn.forEach(t),xt=r(Pe," denote the so called basis states of a qubit that are the quantum-equivalent of classical bit states. If you look at a qubit directly to learn it's value, you'll see one of these basis states. But while you're not looking - due to it's quantum nature - the "),we(he.$$.fragment,Pe),ba=r(Pe," of a qubit may be something more intricate. Generally, it can be expressed as the "),we(qe.$$.fragment,Pe),za=r(Pe," of the two basis states: "),Kt=l(Pe,"SPAN",{});var It=i(Kt);It.forEach(t),Fa=r(Pe,". Here, "),ta=l(Pe,"SPAN",{});var _s=i(ta);_s.forEach(t),ha=r(Pe," and "),At=l(Pe,"SPAN",{});var pn=i(At);pn.forEach(t),lt=r(Pe," are complex numbers that indicate the relative weight, with which the two basis states are present in this combination. More precisely, if we now look at the qubit, we'll see the basis state "),ka=l(Pe,"SPAN",{});var Gs=i(ka);Gs.forEach(t),yn=r(Pe," with a probability of "),Ta=l(Pe,"SPAN",{});var ds=i(Ta);ds.forEach(t),va=r(Pe,", and the basis state "),Ke=l(Pe,"SPAN",{});var fn=i(Ke);fn.forEach(t),Da=r(Pe," with a probability of "),me=l(Pe,"SPAN",{});var Us=i(me);Us.forEach(t),Na=r(Pe,". Because these probabilities must add up to one - as "),Ra=l(Pe,"SPAN",{});var bs=i(Ra);bs.forEach(t),Ea=r(Pe," and "),Qa=l(Pe,"SPAN",{});var cn=i(Qa);cn.forEach(t),Pa=r(Pe," are the only possible outcomes - the equation "),Wa=l(Pe,"SPAN",{});var Ks=i(Wa);Ks.forEach(t),wa=r(Pe," must hold for all possible qubit states. Let's call "),Qt=l(Pe,"SPAN",{});var vs=i(Qt);vs.forEach(t),Sa=r(Pe," and "),Ua=l(Pe,"SPAN",{});var _n=i(Ua);_n.forEach(t),Ka=r(Pe," the measurement probabilities of the basis states."),Pe.forEach(t)},m(q,_e){c(q,n,_e),e(n,h),c(q,f,_e),c(q,u,_e),e(u,y),ge(d,u,null),e(u,b),e(u,g),g.innerHTML=w,e(u,B),e(u,k),k.innerHTML=M,e(u,C),e(u,P),P.innerHTML=x,e(u,re),e(u,S),S.innerHTML=z,e(u,j),e(u,E),E.innerHTML=ee,e(u,A),ge(D,u,null),e(u,I),e(u,N),N.innerHTML=W,e(u,X),ge(Z,u,null),e(u,$),e(u,V),V.innerHTML=F,e(u,O),e(u,se),se.innerHTML=Se,e(u,Ee),c(q,Fe,_e),c(q,te,_e),e(te,v),ge(T,te,null),e(te,G),e(te,U),U.innerHTML=pe,e(te,He),e(te,Ve),Ve.innerHTML=Be,e(te,nt),c(q,We,_e),c(q,ze,_e),e(ze,st),e(ze,Ce),Ce.innerHTML=ke,e(ze,gt),e(ze,Te),Te.innerHTML=De,e(ze,oe),e(ze,Re),Re.innerHTML=_t,e(ze,be),c(q,ht,_e),c(q,fe,_e),e(fe,J),e(fe,ce),ce.innerHTML=R,e(fe,dt),e(fe,rt),rt.innerHTML=Ge,e(fe,bt),e(fe,ot),ot.innerHTML=Ze,e(fe,qt),e(fe,ae),ae.innerHTML=Me,e(fe,ne),e(fe,Tt),Tt.innerHTML=vt,e(fe,Nt),e(fe,Ue),Ue.innerHTML=Et,e(fe,Jt),e(fe,Bt),Bt.innerHTML=yt,e(fe,Ct),e(fe,Pt),Pt.innerHTML=ca,e(fe,$t),c(q,Xe,_e),c(q,Ht,_e),e(Ht,wt),c(q,Je,_e),c(q,tt,_e),e(tt,ut),ge(Ne,tt,null),e(tt,St),ge(mt,tt,null),e(tt,_a),e(tt,kt),kt.innerHTML=Ft,e(tt,da),e(tt,pt),pt.innerHTML=Zt,e(tt,la),c(q,Wt,_e),c(q,Ie,_e),ge(Y,Ie,null),e(Ie,Qe),e(Ie,Oe),Oe.innerHTML=ya,e(Ie,Vt),e(Ie,Lt),Lt.innerHTML=Ya,e(Ie,Xt),ge(Ae,Ie,null),e(Ie,Ma),c(q,Gt,_e),c(q,ie,_e),e(ie,Ia),e(ie,Ut),Ut.innerHTML=ia,e(ie,xa),e(ie,le),le.innerHTML=ft,e(ie,xt),ge(he,ie,null),e(ie,ba),ge(qe,ie,null),e(ie,za),e(ie,Kt),Kt.innerHTML=gn,e(ie,Fa),e(ie,ta),ta.innerHTML=$a,e(ie,ha),e(ie,At),At.innerHTML=Va,e(ie,lt),e(ie,ka),ka.innerHTML=ja,e(ie,yn),e(ie,Ta),Ta.innerHTML=tn,e(ie,va),e(ie,Ke),Ke.innerHTML=hs,e(ie,Da),e(ie,me),me.innerHTML=$n,e(ie,Na),e(ie,Ra),Ra.innerHTML=kn,e(ie,Ea),e(ie,Qa),Qa.innerHTML=ua,e(ie,Pa),e(ie,Wa),Wa.innerHTML=Ga,e(ie,wa),e(ie,Qt),Qt.innerHTML=Tn,e(ie,Sa),e(ie,Ua),Ua.innerHTML=Nn,e(ie,Ka),Pn=!0,En||(en=[p(g,"mouseenter",a[0]),p(k,"mouseenter",a[1]),p(P,"mouseenter",a[2]),p(S,"mouseenter",a[3]),p(E,"mouseenter",a[4]),p(N,"mouseenter",a[5]),p(V,"mouseenter",a[6]),p(se,"mouseenter",a[7]),p(U,"mouseenter",a[8]),p(Ve,"mouseenter",a[9]),p(Ce,"mouseenter",a[10]),p(Te,"mouseenter",a[11]),p(Re,"mouseenter",a[12]),p(ce,"mouseenter",a[13]),p(rt,"mouseenter",a[14]),p(ot,"mouseenter",a[15]),p(ae,"mouseenter",a[16]),p(Tt,"mouseenter",a[17]),p(Ue,"mouseenter",a[18]),p(Bt,"mouseenter",a[19]),p(Pt,"mouseenter",a[20]),p(kt,"mouseenter",a[21]),p(pt,"mouseenter",a[22]),p(Oe,"mouseenter",a[23]),p(Lt,"mouseenter",a[24]),p(Ut,"mouseenter",a[25]),p(le,"mouseenter",a[26]),p(Kt,"mouseenter",a[27]),p(ta,"mouseenter",a[28]),p(At,"mouseenter",a[29]),p(ka,"mouseenter",a[30]),p(Ta,"mouseenter",a[31]),p(Ke,"mouseenter",a[32]),p(me,"mouseenter",a[33]),p(Ra,"mouseenter",a[34]),p(Qa,"mouseenter",a[35]),p(Wa,"mouseenter",a[36]),p(Qt,"mouseenter",a[37]),p(Ua,"mouseenter",a[38])],En=!0)},p(q,_e){const xe={};_e[1]&256&&(xe.$$scope={dirty:_e,ctx:q}),d.$set(xe);const Sn={};_e[1]&256&&(Sn.$$scope={dirty:_e,ctx:q}),D.$set(Sn);const an={};_e[1]&256&&(an.$$scope={dirty:_e,ctx:q}),Z.$set(an);const Ba={};_e[1]&256&&(Ba.$$scope={dirty:_e,ctx:q}),T.$set(Ba);const An={};_e[1]&256&&(An.$$scope={dirty:_e,ctx:q}),Ne.$set(An);const nn={};_e[1]&256&&(nn.$$scope={dirty:_e,ctx:q}),mt.$set(nn);const Ca={};_e[1]&256&&(Ca.$$scope={dirty:_e,ctx:q}),Y.$set(Ca);const qn={};_e[1]&256&&(qn.$$scope={dirty:_e,ctx:q}),Ae.$set(qn);const sn={};_e[1]&256&&(sn.$$scope={dirty:_e,ctx:q}),he.$set(sn);const jt={};_e[1]&256&&(jt.$$scope={dirty:_e,ctx:q}),qe.$set(jt)},i(q){Pn||(ue(d.$$.fragment,q),ue(D.$$.fragment,q),ue(Z.$$.fragment,q),ue(T.$$.fragment,q),ue(Ne.$$.fragment,q),ue(mt.$$.fragment,q),ue(Y.$$.fragment,q),ue(Ae.$$.fragment,q),ue(he.$$.fragment,q),ue(qe.$$.fragment,q),Pn=!0)},o(q){de(d.$$.fragment,q),de(D.$$.fragment,q),de(Z.$$.fragment,q),de(T.$$.fragment,q),de(Ne.$$.fragment,q),de(mt.$$.fragment,q),de(Y.$$.fragment,q),de(Ae.$$.fragment,q),de(he.$$.fragment,q),de(qe.$$.fragment,q),Pn=!1},d(q){q&&t(n),q&&t(f),q&&t(u),ye(d),ye(D),ye(Z),q&&t(Fe),q&&t(te),ye(T),q&&t(We),q&&t(ze),q&&t(ht),q&&t(fe),q&&t(Xe),q&&t(Ht),q&&t(Je),q&&t(tt),ye(Ne),ye(mt),q&&t(Wt),q&&t(Ie),ye(Y),ye(Ae),q&&t(Gt),q&&t(ie),ye(he),ye(qe),En=!1,Xa(en)}}}function Le(a){console.log(a)}function Eh(a){return[()=>Le(["C","z"]),()=>Le(["b","a","z"]),()=>Le(["b","R","a"]),()=>Le([]),()=>Le(["a"]),()=>Le(["b"]),()=>Le(["z"]),()=>Le(["a"]),()=>Le(["x"]),()=>Le(["y"]),()=>Le(["b","a","z"]),()=>Le(["z"]),()=>Le(["b","a","z"]),()=>Le(["z"]),()=>Le(["z","\\phi"]),()=>Le(["z","\\phi"]),()=>Le(["z","\\phi"]),()=>Le(["z","\\phi"]),()=>Le([]),()=>Le(["z"]),()=>Le(["z"]),()=>Le([]),()=>Le([]),()=>Le([]),()=>Le([]),()=>Le([]),()=>Le([]),()=>Le(["\\beta","\\alpha"]),()=>Le(["\\alpha"]),()=>Le(["\\beta"]),()=>Le([]),()=>Le(["\\alpha"]),()=>Le([]),()=>Le(["\\beta"]),()=>Le([]),()=>Le([]),()=>Le(["\\beta","\\alpha"]),()=>Le(["\\alpha"]),()=>Le(["\\beta"])]}class Ph extends sa{constructor(n){super(),ra(this,n,Eh,Nh,oa,{},null,[-1,-1])}}const Sh='<a href="https://en.wikipedia.org/wiki/Separable_state"><h3>Separable state</h3></a><p>In quantum mechanics, <b>separable states</b> are quantum states belonging to a composite space that can be factored into individual states belonging to separate subspaces. A state is said to be entangled if it is not separable. In general, determining if a state is separable is not straightforward and the problem is classed as NP-hard.</p>',Ah='<a href="https://en.wikipedia.org/wiki/Quantum_entanglement"><h3>Quantum entanglement</h3></a><p><b>Quantum entanglement</b> is the physical phenomenon that occurs when a group of particles are generated, interact, or share spatial proximity in a way such that the quantum state of each particle of the group cannot be described independently of the state of the others, including when the particles are separated by a large distance. The topic of quantum entanglement is at the heart of the disparity between classical and quantum physics: entanglement is a primary feature of quantum mechanics lacking in classical mechanics.</p>';function qh(a){let n;return{c(){n=s("separable")},l(h){n=r(h,"separable")},m(h,f){c(h,n,f)},d(h){h&&t(n)}}}function Hh(a){let n;return{c(){n=s("entaglement")},l(h){n=r(h,"entaglement")},m(h,f){c(h,n,f)},d(h){h&&t(n)}}}function Lh(a){let n,h,f,u,y,d,b,g,w,B,k=m("|0\\rangle")+"",M,C,P=m("|1\\rangle")+"",x,re,S,z,j,E=m("|\\psi\\rangle")+"",ee,A,D=m("n")+"",I,N,W=m("|\\psi\\rangle = \\left( \\alpha_1 |0\\rangle + \\beta_1 |1\\rangle \\right) \\otimes ... \\otimes \\left( \\alpha_n |0\\rangle + \\beta_n |1\\rangle \\right)")+"",X,Z,$=m("\\alpha_k, \\beta_k")+"",V,F,O=m("k")+"",se,Se,Ee=m("\\otimes")+"",Fe,te,v,T;return d=new at({props:{hovertext:Sh,$$slots:{default:[qh]},$$scope:{ctx:a}}}),g=new at({props:{hovertext:Ah,$$slots:{default:[Hh]},$$scope:{ctx:a}}}),{c(){n=o("h2"),h=s("Multiple qubits"),f=H(),u=o("p"),y=s("Most quantum algorithms require not only one, but several qubits. The states of these qubits may be "),ve(d.$$.fragment),b=s(", meaning they each contain one independent unit of information. However, it is possible for multiple qubits to share some information with each other, in which case they no longer have states of their own, but only one joint state. This is called "),ve(g.$$.fragment),w=s(", and it is another fundamental difference between classical and quantum computing. As an example, two qubits can be entangled in a way that, if we look at one of them and find it's in the basis state "),B=o("span"),M=s(", we learn immediately that the other one must be in the basis state "),C=o("span"),x=s(", and vice versa."),re=H(),S=o("p"),z=s("Let "),j=o("span"),ee=s(" denote the state of a sequence of "),A=o("span"),I=s(" qubits. If the qubits are separable, the state can be written as "),N=o("span"),X=s(", where "),Z=o("span"),V=s(" are the coefficients associated with the state of the "),F=o("span"),se=s("-th qubit as described above, and the operator "),Se=o("span"),Fe=s(" indicates that none of the qubits are entagled with each other.")},l(G){n=l(G,"H2",{});var U=i(n);h=r(U,"Multiple qubits"),U.forEach(t),f=L(G),u=l(G,"P",{});var pe=i(u);y=r(pe,"Most quantum algorithms require not only one, but several qubits. The states of these qubits may be "),we(d.$$.fragment,pe),b=r(pe,", meaning they each contain one independent unit of information. However, it is possible for multiple qubits to share some information with each other, in which case they no longer have states of their own, but only one joint state. This is called "),we(g.$$.fragment,pe),w=r(pe,", and it is another fundamental difference between classical and quantum computing. As an example, two qubits can be entangled in a way that, if we look at one of them and find it's in the basis state "),B=l(pe,"SPAN",{});var He=i(B);He.forEach(t),M=r(pe,", we learn immediately that the other one must be in the basis state "),C=l(pe,"SPAN",{});var Ve=i(C);Ve.forEach(t),x=r(pe,", and vice versa."),pe.forEach(t),re=L(G),S=l(G,"P",{});var Be=i(S);z=r(Be,"Let "),j=l(Be,"SPAN",{});var nt=i(j);nt.forEach(t),ee=r(Be," denote the state of a sequence of "),A=l(Be,"SPAN",{});var We=i(A);We.forEach(t),I=r(Be," qubits. If the qubits are separable, the state can be written as "),N=l(Be,"SPAN",{});var ze=i(N);ze.forEach(t),X=r(Be,", where "),Z=l(Be,"SPAN",{});var st=i(Z);st.forEach(t),V=r(Be," are the coefficients associated with the state of the "),F=l(Be,"SPAN",{});var Ce=i(F);Ce.forEach(t),se=r(Be,"-th qubit as described above, and the operator "),Se=l(Be,"SPAN",{});var ke=i(Se);ke.forEach(t),Fe=r(Be," indicates that none of the qubits are entagled with each other."),Be.forEach(t)},m(G,U){c(G,n,U),e(n,h),c(G,f,U),c(G,u,U),e(u,y),ge(d,u,null),e(u,b),ge(g,u,null),e(u,w),e(u,B),B.innerHTML=k,e(u,M),e(u,C),C.innerHTML=P,e(u,x),c(G,re,U),c(G,S,U),e(S,z),e(S,j),j.innerHTML=E,e(S,ee),e(S,A),A.innerHTML=D,e(S,I),e(S,N),N.innerHTML=W,e(S,X),e(S,Z),Z.innerHTML=$,e(S,V),e(S,F),F.innerHTML=O,e(S,se),e(S,Se),Se.innerHTML=Ee,e(S,Fe),te=!0,v||(T=[p(B,"mouseenter",a[0]),p(C,"mouseenter",a[1]),p(j,"mouseenter",a[2]),p(A,"mouseenter",a[3]),p(N,"mouseenter",a[4]),p(Z,"mouseenter",a[5]),p(F,"mouseenter",a[6]),p(Se,"mouseenter",a[7])],v=!0)},p(G,[U]){const pe={};U&256&&(pe.$$scope={dirty:U,ctx:G}),d.$set(pe);const He={};U&256&&(He.$$scope={dirty:U,ctx:G}),g.$set(He)},i(G){te||(ue(d.$$.fragment,G),ue(g.$$.fragment,G),te=!0)},o(G){de(d.$$.fragment,G),de(g.$$.fragment,G),te=!1},d(G){G&&t(n),G&&t(f),G&&t(u),ye(d),ye(g),G&&t(re),G&&t(S),v=!1,Xa(T)}}}function vn(a){console.log(a)}function Mh(a){return[()=>vn([]),()=>vn([]),()=>vn(["\\psi"]),()=>vn(["n"]),()=>vn(["\\beta","\\alpha","\\psi","n"]),()=>vn(["\\beta","\\alpha","k"]),()=>vn(["k"]),()=>vn([])]}class Ih extends sa{constructor(n){super(),ra(this,n,Mh,Lh,oa,{})}}function zh(a){let n,h,f,u,y,d,b,g,w=m("\\phi \\alpha")+"",B,k,M,C=m("\\phi \\beta")+"",P,x,re,S=m("r \\alpha")+"",z,j,E,ee,A,D,I,N,W,X,Z,$,V,F,O,se,Se;u=new Ph({}),E=new Kr({props:{displayBloch:!1,phiAlpha:a[4],phiBeta:a[3],rAlpha:a[5]}}),A=new sh({});function Ee(v){a[10](v)}function Fe(v){a[11](v)}let te={minX:1.5,polar:!0};return a[0]!==void 0&&(te.disabledScroll=a[0]),a[6]!==void 0&&(te.cameraPosition=a[6]),N=new Zl({props:te}),Er.push(()=>Pr(N,"disabledScroll",Ee)),Er.push(()=>Pr(N,"cameraPosition",Fe)),$=new Kr({props:{displayVectors:!1,phiAlpha:a[4],phiBeta:a[3],rAlpha:a[5],cameraPosition:a[6]}}),F=new Ih({}),{c(){n=o("h2"),h=s("Quantum Basics"),f=H(),ve(u.$$.fragment),y=H(),d=o("div"),b=o("div"),g=new Ye(!1),B=o("input"),k=H(),M=new Ye(!1),P=o("input"),x=H(),re=new Ye(!1),z=o("input"),j=H(),ve(E.$$.fragment),ee=H(),ve(A.$$.fragment),D=H(),I=o("div"),ve(N.$$.fragment),Z=H(),ve($.$$.fragment),V=H(),ve(F.$$.fragment),this.h()},l(v){n=l(v,"H2",{});var T=i(n);h=r(T,"Quantum Basics"),T.forEach(t),f=L(v),we(u.$$.fragment,v),y=L(v),d=l(v,"DIV",{class:!0});var G=i(d);b=l(G,"DIV",{class:!0});var U=i(b);g=et(U,!1),B=l(U,"INPUT",{class:!0,type:!0,min:!0,max:!0,step:!0}),k=L(U),M=et(U,!1),P=l(U,"INPUT",{class:!0,type:!0,min:!0,max:!0,step:!0}),x=L(U),re=et(U,!1),z=l(U,"INPUT",{class:!0,type:!0,min:!0,max:!0,step:!0}),U.forEach(t),j=L(G),we(E.$$.fragment,G),G.forEach(t),ee=L(v),we(A.$$.fragment,v),D=L(v),I=l(v,"DIV",{class:!0});var pe=i(I);we(N.$$.fragment,pe),Z=L(pe),we($.$$.fragment,pe),pe.forEach(t),V=L(v),we(F.$$.fragment,v),this.h()},h(){g.a=B,$e(B,"class","slider"),$e(B,"type","range"),$e(B,"min",0),$e(B,"max",360),$e(B,"step",1),M.a=P,$e(P,"class","slider"),$e(P,"type","range"),$e(P,"min",0),$e(P,"max",360),$e(P,"step",1),re.a=z,$e(z,"class","slider"),$e(z,"type","range"),$e(z,"min",0),$e(z,"max",1),$e(z,"step",.01),$e(b,"class","cpanel svelte-vlthtg"),$e(d,"class","interaction"),$e(I,"class","interaction")},m(v,T){c(v,n,T),e(n,h),c(v,f,T),ge(u,v,T),c(v,y,T),c(v,d,T),e(d,b),g.m(w,b),e(b,B),La(B,a[2]),e(b,k),M.m(C,b),e(b,P),La(P,a[1]),e(b,x),re.m(S,b),e(b,z),La(z,a[5]),e(d,j),ge(E,d,null),c(v,ee,T),ge(A,v,T),c(v,D,T),c(v,I,T),ge(N,I,null),e(I,Z),ge($,I,null),c(v,V,T),ge(F,v,T),O=!0,se||(Se=[p(B,"change",a[7]),p(B,"input",a[7]),p(P,"change",a[8]),p(P,"input",a[8]),p(z,"change",a[9]),p(z,"input",a[9])],se=!0)},p(v,[T]){T&4&&La(B,v[2]),T&2&&La(P,v[1]),T&32&&La(z,v[5]);const G={};T&16&&(G.phiAlpha=v[4]),T&8&&(G.phiBeta=v[3]),T&32&&(G.rAlpha=v[5]),E.$set(G);const U={};!W&&T&1&&(W=!0,U.disabledScroll=v[0],Sr(()=>W=!1)),!X&&T&64&&(X=!0,U.cameraPosition=v[6],Sr(()=>X=!1)),N.$set(U);const pe={};T&16&&(pe.phiAlpha=v[4]),T&8&&(pe.phiBeta=v[3]),T&32&&(pe.rAlpha=v[5]),T&64&&(pe.cameraPosition=v[6]),$.$set(pe)},i(v){O||(ue(u.$$.fragment,v),ue(E.$$.fragment,v),ue(A.$$.fragment,v),ue(N.$$.fragment,v),ue($.$$.fragment,v),ue(F.$$.fragment,v),O=!0)},o(v){de(u.$$.fragment,v),de(E.$$.fragment,v),de(A.$$.fragment,v),de(N.$$.fragment,v),de($.$$.fragment,v),de(F.$$.fragment,v),O=!1},d(v){v&&t(n),v&&t(f),ye(u,v),v&&t(y),v&&t(d),ye(E),v&&t(ee),ye(A,v),v&&t(D),v&&t(I),ye(N),ye($),v&&t(V),ye(F,v),se=!1,Xa(Se)}}}function Fh(a,n,h){let f,u,y,d,b,g,{disabledScroll:w=!1}=n;function B(){u=wn(this.value),h(2,u)}function k(){y=wn(this.value),h(1,y)}function M(){d=wn(this.value),h(5,d)}function C(x){w=x,h(0,w)}function P(x){f=x,h(6,f)}return a.$$set=x=>{"disabledScroll"in x&&h(0,w=x.disabledScroll)},a.$$.update=()=>{a.$$.dirty&4&&h(4,b=u/180*Or),a.$$.dirty&2&&h(3,g=y/180*Or)},h(6,f={x:3,y:2,z:1.5}),h(2,u=15),h(1,y=310),h(5,d=.9),[w,y,u,g,b,d,f,B,k,M,C,P]}class Vh extends sa{constructor(n){super(),ra(this,n,Fh,zh,oa,{disabledScroll:0})}}const Qh='<a href="https://en.wikipedia.org/wiki/Periodic_function"><h3 class="text-lg font-semibold">Periodic function</h3></a><p>A <b>periodic function</b> is a function that repeats its values at regular intervals. For example, the trigonometric functions, which repeat at intervals of <span class="mwe-math-element"><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/73efd1f6493490b058097060a572606d2c550a06" class="mwe-math-fallback-image-inline" aria-hidden="true" style="vertical-align:-0.338ex;width:2.494ex;height:2.176ex" /></span> radians, are periodic functions. Periodic functions are used throughout science to describe oscillations, waves, and other phenomena that exhibit periodicity. Any function that is not periodic is called <b>aperiodic</b>.</p>';function Bh(a){let n;return{c(){n=s("periodic")},l(h){n=r(h,"periodic")},m(h,f){c(h,n,f)},d(h){h&&t(n)}}}function Ch(a){let n,h,f,u,y,d,b=m("N")+"",g,w,B=m("1 < \\hat{r} < N")+"",k,M,C=m("f(\\hat{r}) = a^{\\hat{r}} \\mod N = 1")+"",P,x,re=m("f")+"",S,z,j,E,ee=m("\\hat{r}")+"",A,D,I=m("f")+"",N,W,X=m("0 < p")+"",Z,$,V=m("f(r) = f(r + p)")+"",F,O,se=m("r")+"",Se,Ee,Fe=m("f(0) = a^{0} \\mod N = 1 \\mod N = 1")+"",te,v,T=m("f(0) = f(0 + p) = f(p) = 1")+"",G,U,pe=m("p")+"",He,Ve,Be=m("f")+"",nt,We,ze=m("1")+"",st,Ce,ke=m("\\hat{r}")+"",gt,Te,De,oe,Re,_t=m("\\hat{r}")+"",be,ht,fe=m("f")+"",J,ce,R,dt,rt,Ge,bt,ot,Ze,qt;return z=new at({props:{hovertext:Qh,$$slots:{default:[Bh]},$$scope:{ctx:a}}}),{c(){n=o("h2"),h=s("The period-finding problem"),f=H(),u=o("p"),y=s("Recall the steps for computing the prime factors of a large integer "),d=o("span"),g=s(", the hard part of which was finding the smallest "),w=o("span"),k=s(" such that "),M=o("span"),P=s(". It turns out that "),x=o("span"),S=s(" is a "),ve(z.$$.fragment),j=s(" function, and the integer "),E=o("span"),A=s(" we're looking for is its period. This is because the period of "),D=o("span"),N=s(" is defined as the smallest integer "),W=o("span"),Z=s(", for which "),$=o("span"),F=s(" for all "),O=o("span"),Se=s(". We know for sure that "),Ee=o("span"),te=s(", from which follows that "),v=o("span"),G=s(". Thus, the period "),U=o("span"),He=s(" is the smallest positive integer, at which the value of "),Ve=o("span"),nt=s(" is "),We=o("span"),st=s(", and this is exactly how we originally defined "),Ce=o("span"),gt=s("."),Te=H(),De=o("p"),oe=s("Thus, finding "),Re=o("span"),be=s(" can be reformulated as finding the period of the function "),ht=o("span"),J=s(", which is where the quantum Fourier transform will prove extremely useful."),ce=H(),R=o("h2"),dt=s("Finding the period with the help of interference"),rt=H(),Ge=o("p"),bt=s("...")},l(ae){n=l(ae,"H2",{});var Me=i(n);h=r(Me,"The period-finding problem"),Me.forEach(t),f=L(ae),u=l(ae,"P",{});var ne=i(u);y=r(ne,"Recall the steps for computing the prime factors of a large integer "),d=l(ne,"SPAN",{});var Tt=i(d);Tt.forEach(t),g=r(ne,", the hard part of which was finding the smallest "),w=l(ne,"SPAN",{});var vt=i(w);vt.forEach(t),k=r(ne," such that "),M=l(ne,"SPAN",{});var Nt=i(M);Nt.forEach(t),P=r(ne,". It turns out that "),x=l(ne,"SPAN",{});var Ue=i(x);Ue.forEach(t),S=r(ne," is a "),we(z.$$.fragment,ne),j=r(ne," function, and the integer "),E=l(ne,"SPAN",{});var Et=i(E);Et.forEach(t),A=r(ne," we're looking for is its period. This is because the period of "),D=l(ne,"SPAN",{});var Jt=i(D);Jt.forEach(t),N=r(ne," is defined as the smallest integer "),W=l(ne,"SPAN",{});var Bt=i(W);Bt.forEach(t),Z=r(ne,", for which "),$=l(ne,"SPAN",{});var yt=i($);yt.forEach(t),F=r(ne," for all "),O=l(ne,"SPAN",{});var Ct=i(O);Ct.forEach(t),Se=r(ne,". We know for sure that "),Ee=l(ne,"SPAN",{});var Pt=i(Ee);Pt.forEach(t),te=r(ne,", from which follows that "),v=l(ne,"SPAN",{});var ca=i(v);ca.forEach(t),G=r(ne,". Thus, the period "),U=l(ne,"SPAN",{});var $t=i(U);$t.forEach(t),He=r(ne," is the smallest positive integer, at which the value of "),Ve=l(ne,"SPAN",{});var Xe=i(Ve);Xe.forEach(t),nt=r(ne," is "),We=l(ne,"SPAN",{});var Ht=i(We);Ht.forEach(t),st=r(ne,", and this is exactly how we originally defined "),Ce=l(ne,"SPAN",{});var wt=i(Ce);wt.forEach(t),gt=r(ne,"."),ne.forEach(t),Te=L(ae),De=l(ae,"P",{});var Je=i(De);oe=r(Je,"Thus, finding "),Re=l(Je,"SPAN",{});var tt=i(Re);tt.forEach(t),be=r(Je," can be reformulated as finding the period of the function "),ht=l(Je,"SPAN",{});var ut=i(ht);ut.forEach(t),J=r(Je,", which is where the quantum Fourier transform will prove extremely useful."),Je.forEach(t),ce=L(ae),R=l(ae,"H2",{});var Ne=i(R);dt=r(Ne,"Finding the period with the help of interference"),Ne.forEach(t),rt=L(ae),Ge=l(ae,"P",{});var St=i(Ge);bt=r(St,"..."),St.forEach(t)},m(ae,Me){c(ae,n,Me),e(n,h),c(ae,f,Me),c(ae,u,Me),e(u,y),e(u,d),d.innerHTML=b,e(u,g),e(u,w),w.innerHTML=B,e(u,k),e(u,M),M.innerHTML=C,e(u,P),e(u,x),x.innerHTML=re,e(u,S),ge(z,u,null),e(u,j),e(u,E),E.innerHTML=ee,e(u,A),e(u,D),D.innerHTML=I,e(u,N),e(u,W),W.innerHTML=X,e(u,Z),e(u,$),$.innerHTML=V,e(u,F),e(u,O),O.innerHTML=se,e(u,Se),e(u,Ee),Ee.innerHTML=Fe,e(u,te),e(u,v),v.innerHTML=T,e(u,G),e(u,U),U.innerHTML=pe,e(u,He),e(u,Ve),Ve.innerHTML=Be,e(u,nt),e(u,We),We.innerHTML=ze,e(u,st),e(u,Ce),Ce.innerHTML=ke,e(u,gt),c(ae,Te,Me),c(ae,De,Me),e(De,oe),e(De,Re),Re.innerHTML=_t,e(De,be),e(De,ht),ht.innerHTML=fe,e(De,J),c(ae,ce,Me),c(ae,R,Me),e(R,dt),c(ae,rt,Me),c(ae,Ge,Me),e(Ge,bt),ot=!0,Ze||(qt=[p(d,"mouseenter",a[0]),p(w,"mouseenter",a[1]),p(M,"mouseenter",a[2]),p(x,"mouseenter",a[3]),p(E,"mouseenter",a[4]),p(D,"mouseenter",a[5]),p(W,"mouseenter",a[6]),p($,"mouseenter",a[7]),p(O,"mouseenter",a[8]),p(Ee,"mouseenter",a[9]),p(v,"mouseenter",a[10]),p(U,"mouseenter",a[11]),p(Ve,"mouseenter",a[12]),p(We,"mouseenter",a[13]),p(Ce,"mouseenter",a[14]),p(Re,"mouseenter",a[15]),p(ht,"mouseenter",a[16])],Ze=!0)},p(ae,[Me]){const ne={};Me&131072&&(ne.$$scope={dirty:Me,ctx:ae}),z.$set(ne)},i(ae){ot||(ue(z.$$.fragment,ae),ot=!0)},o(ae){de(z.$$.fragment,ae),ot=!1},d(ae){ae&&t(n),ae&&t(f),ae&&t(u),ye(z),ae&&t(Te),ae&&t(De),ae&&t(ce),ae&&t(R),ae&&t(rt),ae&&t(Ge),Ze=!1,Xa(qt)}}}function Ot(a){console.log(a)}function xh(a){return[()=>Ot(["N"]),()=>Ot(["r","N"]),()=>Ot(["r","N","f","a"]),()=>Ot(["f"]),()=>Ot(["r"]),()=>Ot(["f"]),()=>Ot(["p"]),()=>Ot(["r","f","p"]),()=>Ot(["r"]),()=>Ot(["N","f","a"]),()=>Ot(["f","p"]),()=>Ot(["p"]),()=>Ot(["f"]),()=>Ot([]),()=>Ot(["r"]),()=>Ot(["r"]),()=>Ot(["f"])]}class jh extends sa{constructor(n){super(),ra(this,n,xh,Ch,oa,{})}}function Dh(a){let n,h,f,u,y;return u=new jh({}),{c(){n=o("h2"),h=s("Shor's Algorithm"),f=H(),ve(u.$$.fragment)},l(d){n=l(d,"H2",{});var b=i(n);h=r(b,"Shor's Algorithm"),b.forEach(t),f=L(d),we(u.$$.fragment,d)},m(d,b){c(d,n,b),e(n,h),c(d,f,b),ge(u,d,b),y=!0},p:Za,i(d){y||(ue(u.$$.fragment,d),y=!0)},o(d){de(u.$$.fragment,d),y=!1},d(d){d&&t(n),d&&t(f),ye(u,d)}}}class Rh extends sa{constructor(n){super(),ra(this,n,null,Dh,oa,{})}}function Wh(a){let n,h,f,u,y,d,b,g,w,B,k,M,C,P,x,re,S,z,j,E,ee;C=new Fi({});function A(I){a[1](I)}let D={};return a[0]!==void 0&&(D.disabledScroll=a[0]),x=new Vh({props:D}),Er.push(()=>Pr(x,"disabledScroll",A)),z=new Ui({}),E=new Rh({}),{c(){n=o("div"),h=H(),f=o("main"),u=o("h1"),y=s("Interactive Quantum Computing"),d=H(),b=o("p"),g=s("This page intends to introduce concepts, connect them and derive a practical use case"),w=H(),B=o("h2"),k=s("Clickable Table of Contents"),M=H(),ve(C.$$.fragment),P=H(),ve(x.$$.fragment),S=H(),ve(z.$$.fragment),j=H(),ve(E.$$.fragment),this.h()},l(I){n=l(I,"DIV",{class:!0}),i(n).forEach(t),h=L(I),f=l(I,"MAIN",{class:!0});var N=i(f);u=l(N,"H1",{});var W=i(u);y=r(W,"Interactive Quantum Computing"),W.forEach(t),d=L(N),b=l(N,"P",{});var X=i(b);g=r(X,"This page intends to introduce concepts, connect them and derive a practical use case"),X.forEach(t),w=L(N),B=l(N,"H2",{});var Z=i(B);k=r(Z,"Clickable Table of Contents"),Z.forEach(t),M=L(N),we(C.$$.fragment,N),P=L(N),we(x.$$.fragment,N),S=L(N),we(z.$$.fragment,N),j=L(N),we(E.$$.fragment,N),N.forEach(t),this.h()},h(){$e(n,"class","sidebar"),$e(f,"class","svelte-1tkfm11"),Ur(f,"scroll-lock",a[0])},m(I,N){c(I,n,N),c(I,h,N),c(I,f,N),e(f,u),e(u,y),e(f,d),e(f,b),e(b,g),e(f,w),e(f,B),e(B,k),e(f,M),ge(C,f,null),e(f,P),ge(x,f,null),e(f,S),ge(z,f,null),e(f,j),ge(E,f,null),ee=!0},p(I,[N]){const W={};!re&&N&1&&(re=!0,W.disabledScroll=I[0],Sr(()=>re=!1)),x.$set(W),N&1&&Ur(f,"scroll-lock",I[0])},i(I){ee||(ue(C.$$.fragment,I),ue(x.$$.fragment,I),ue(z.$$.fragment,I),ue(E.$$.fragment,I),ee=!0)},o(I){de(C.$$.fragment,I),de(x.$$.fragment,I),de(z.$$.fragment,I),de(E.$$.fragment,I),ee=!1},d(I){I&&t(n),I&&t(h),I&&t(f),ye(C),ye(x),ye(z),ye(E)}}}const Oh=!0;function Gh(a,n,h){let f=!1;function u(y){f=y,h(0,f)}return[f,u]}class Jh extends sa{constructor(n){super(),ra(this,n,Gh,Wh,oa,{})}}export{Jh as default,Oh as prerender};
